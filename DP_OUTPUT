/* ========================  
   Tao Payment 后台样式  
   Version: 1.1.0  
   ======================== */

/* ------------------------  
   后台配置页通用样式  
   ------------------------ */  
   .tao-payment-settings {  
    max-width: 800px;  
    margin: 20px auto;  
    padding: 20px;  
    background: #fff;  
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);  
}  

.tao-payment-settings h2 {  
    color: #2271b1;  
    border-bottom: 2px solid #2271b1;  
    padding-bottom: 0.5em;  
    margin-bottom: 1.5em;  
}  

.tao-payment-settings .form-table th {  
    width: 250px;  
    padding: 20px 10px 20px 0;  
}  

.tao-payment-settings .form-table td {  
    padding: 15px 10px;  
}  

/* ------------------------  
   证书上传区域  
   ------------------------ */  
.tao-payment-cert-upload {  
    margin: 15px 0;  
    padding: 15px;  
    border: 1px solid #ddd;  
    background: #f9f9f9;  
}  

.tao-payment-cert-upload input[type="file"] {  
    margin: 5px 0;  
    padding: 5px;  
    border: 1px solid #ddd;  
    border-radius: 3px;  
    display: block;  
}  

.tao-payment-cert-upload .description {  
    font-size: 0.9em;  
    color: #666;  
    margin-top: 5px;  
}  

/* ------------------------  
   错误提示  
   ------------------------ */  
.tao-payment-error {  
    color: #dc3232;  
    padding: 10px;  
    border-left: 4px solid #dc3232;  
    background: #fff;  
}  

.tao-payment-alert {  
    padding: 10
==== ./includes/admin/network-settings.php ====
<?php  
if (!defined('ABSPATH')) exit;  

/**
 * 网络级配置管理类（支持强制全局模式）
 * @version 1.2.0
 */
class Tao_Payment_Network_Settings {  

    public function __construct() {  
        add_action('network_admin_menu', [$this, 'add_network_settings_page']);  
        add_action('network_admin_edit_tao_payment_global_config', [$this, 'save_network_settings']);  
    }  

    public function add_network_settings_page() {  
        add_submenu_page(  
            'settings.php',  
            __('Tao支付全局配置', TAO_PAYMENT_TEXT_DOMAIN),  
            __('支付配置', TAO_PAYMENT_TEXT_DOMAIN),  
            'manage_network_options',  
            'tao-payment-global',  
            [$this, 'render_settings_page']  
        );  
    }  

    public function render_settings_page() {  
        if (!current_user_can('manage_network_options')) {  
            wp_die(__('权限不足：您无权访问此页面', TAO_PAYMENT_TEXT_DOMAIN));  
        }  

        $config = get_site_option('tao_payment_global_config', []);  
        ?>  
        <div class="wrap">  
            <h1><?php esc_html_e('Tao支付全局配置', TAO_PAYMENT_TEXT_DOMAIN); ?></h1>  
            <form method="post" action="edit.php?action=tao_payment_global_config" enctype="multipart/form-data">  
                <?php wp_nonce_field('tao_payment_global_config', '_wpnonce_tao_payment'); ?>  

                <!-- 强制全局模式开关 -->  
                <h2><?php esc_html_e('全局模式控制', TAO_PAYMENT_TEXT_DOMAIN); ?></h2>  
                <table class="form-table">  
                    <tr>  
                        <th scope="row">  
                            <label for="force_global_mode">  
                                <?php esc_html_e('强制使用全局配置', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <input type="checkbox" name="force_global_mode" id="force_global_mode"  
                                   value="yes" <?php checked($config['force_global_mode'] ?? '', 'yes'); ?>>  
                            <p class="description">  
                                <?php esc_html_e('启用后，所有子站点将无法修改支付配置，必须使用全局设置', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </p>  
                        </td>  
                    </tr>  
                </table>  

                <!-- 支付宝完整配置 -->  
                <h2><?php esc_html_e('支付宝配置', TAO_PAYMENT_TEXT_DOMAIN); ?></h2>  
                <table class="form-table">  
                    <tr>  
                        <th scope="row">  
                            <label for="alipay_app_id">  
                                <?php esc_html_e('应用ID (APP_ID)', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <input type="text" name="alipay_app_id" id="alipay_app_id"  
                                   value="<?php echo esc_attr($config['alipay_app_id'] ?? ''); ?>"  
                                   class="regular-text" pattern="[0-9]{16}" required>  
                            <p class="description"><?php esc_html_e('请输入16位支付宝应用ID', TAO_PAYMENT_TEXT_DOMAIN); ?></p>  
                        </td>  
                    </tr>  
                    <tr>  
                        <th scope="row">  
                            <label for="alipay_merchant_private_key">  
                                <?php esc_html_e('商户私钥', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <textarea name="alipay_merchant_private_key" id="alipay_merchant_private_key"  
                                      class="large-text code" rows="8" required  
                            ><?php echo esc_textarea($config['alipay_merchant_private_key'] ?? ''); ?></textarea>  
                            <p class="description"><?php esc_html_e('粘贴支付宝商户私钥（PEM格式）', TAO_PAYMENT_TEXT_DOMAIN); ?></p>  
                        </td>  
                    </tr>  
                    <tr>  
                        <th scope="row">  
                            <label for="alipay_public_key_file">  
                                <?php esc_html_e('支付宝公钥文件', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <input type="file" name="alipay_public_key_file" id="alipay_public_key_file"  
                                   accept=".pem">  
                            <?php if (!empty($config['alipay_public_key_path'])) : ?>  
                                <p class="description">  
                                    <?php printf(  
                                        __('当前文件：%s', TAO_PAYMENT_TEXT_DOMAIN),  
                                        esc_html(basename($config['alipay_public_key_path']))  
                                    ); ?>  
                                </p>  
                            <?php endif; ?>  
                        </td>  
                    </tr>  
                </table>  

                <!-- 微信支付完整配置 -->  
                <h2><?php esc_html_e('微信支付配置', TAO_PAYMENT_TEXT_DOMAIN); ?></h2>  
                <table class="form-table">  
                    <tr>  
                        <th scope="row">  
                            <label for="wechat_mch_id">  
                                <?php esc_html_e('商户号 (MCH_ID)', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <input type="text" name="wechat_mch_id" id="wechat_mch_id"  
                                   value="<?php echo esc_attr($config['wechat_mch_id'] ?? ''); ?>"  
                                   class="regular-text" pattern="[0-9]{10}" required>  
                            <p class="description"><?php esc_html_e('请输入10位微信商户号', TAO_PAYMENT_TEXT_DOMAIN); ?></p>  
                        </td>  
                    </tr>  
                    <tr>  
                        <th scope="row">  
                            <label for="wechat_api_key">  
                                <?php esc_html_e('API密钥', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <textarea name="wechat_api_key" id="wechat_api_key"  
                                      class="large-text code" rows="8" required  
                            ><?php echo esc_textarea($config['wechat_api_key'] ?? ''); ?></textarea>  
                            <p class="description"><?php esc_html_e('输入微信支付APIv3密钥', TAO_PAYMENT_TEXT_DOMAIN); ?></p>  
                        </td>  
                    </tr>  
                    <tr>  
                        <th scope="row">  
                            <label for="wechat_cert_file">  
                                <?php esc_html_e('证书文件', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <input type="file" name="wechat_cert_file" id="wechat_cert_file"  
                                   accept=".pem">  
                            <?php if (!empty($config['wechat_cert_path'])) : ?>  
                                <p class="description">  
                                    <?php printf(  
                                        __('当前文件：%s', TAO_PAYMENT_TEXT_DOMAIN),  
                                        esc_html(basename($config['wechat_cert_path']))  
                                    ); ?>  
                                </p>  
                            <?php endif; ?>  
                        </td>  
                    </tr>  
                    <tr>  
                        <th scope="row">  
                            <label for="wechat_key_file">  
                                <?php esc_html_e('密钥文件', TAO_PAYMENT_TEXT_DOMAIN); ?>  
                            </label>  
                        </th>  
                        <td>  
                            <input type="file" name="wechat_key_file" id="wechat_key_file"  
                                   accept=".pem">  
                            <?php if (!empty($config['wechat_key_path'])) : ?>  
                                <p class="description">  
                                    <?php printf(  
                                        __('当前文件：%s', TAO_PAYMENT_TEXT_DOMAIN),  
                                        esc_html(basename($config['wechat_key_path']))  
                                    ); ?>  
                                </p>  
                            <?php endif; ?>  
                        </td>  
                    </tr>  
                </table>  

                <?php submit_button(__('保存配置', TAO_PAYMENT_TEXT_DOMAIN)); ?>  
            </form>  
        </div>  
        <?php  
    }  

    public function save_network_settings() {  
        check_admin_referer('tao_payment_global_config', '_wpnonce_tao_payment');  

        if (!current_user_can('manage_network_options')) {  
            wp_die(__('操作未授权', TAO_PAYMENT_TEXT_DOMAIN));  
        }  

        // 处理文件上传  
        $upload_dir = wp_upload_dir();  
        $new_config = [  
            'force_global_mode' => isset($_POST['force_global_mode']) ? 'yes' : 'no',  
            'alipay_app_id' => sanitize_text_field($_POST['alipay_app_id'] ?? ''),  
            'alipay_merchant_private_key' => sanitize_textarea_field($_POST['alipay_merchant_private_key'] ?? ''),  
            'wechat_mch_id' => sanitize_text_field($_POST['wechat_mch_id'] ?? ''),  
            'wechat_api_key' => sanitize_textarea_field($_POST['wechat_api_key'] ?? ''),  
        ];  

        // 处理支付宝公钥文件上传  
        if (!empty($_FILES['alipay_public_key_file']['tmp_name'])) {  
            $target_dir = $upload_dir['basedir'] . '/tao-payment-certs/alipay/';  
            wp_mkdir_p($target_dir);  
            $file_name = sanitize_file_name($_FILES['alipay_public_key_file']['name']);  
            $target_path = $target_dir . uniqid('alipay_pub_') . '_' . $file_name;  
            if (move_uploaded_file($_FILES['alipay_public_key_file']['tmp_name'], $target_path)) {  
                $new_config['alipay_public_key_path'] = $target_path;  
            }  
        }  

        // 处理微信证书文件上传  
        foreach (['wechat_cert_file', 'wechat_key_file'] as $field) {  
            if (!empty($_FILES[$field]['tmp_name'])) {  
                $target_dir = $upload_dir['basedir'] . '/tao-payment-certs/wechat/';  
                wp_mkdir_p($target_dir);  
                $file_name = sanitize_file_name($_FILES[$field]['name']);  
                $target_path = $target_dir . uniqid('wechat_') . '_' . $file_name;  
                if (move_uploaded_file($_FILES[$field]['tmp_name'], $target_path)) {  
                    $new_config[$field . '_path'] = $target_path;  
                }  
            }  
        }  

        // 校验必填字段格式  
        if (!preg_match('/^\d{16}$/', $new_config['alipay_app_id'])) {  
            wp_die(__('支付宝应用ID格式错误', TAO_PAYMENT_TEXT_DOMAIN));  
        }  
        if (!preg_match('/^\d{10}$/', $new_config['wechat_mch_id'])) {  
            wp_die(__('微信商户号格式错误', TAO_PAYMENT_TEXT_DOMAIN));  
        }  

        // 合并旧配置（保留未修改的文件路径）  
        $old_config = get_site_option('tao_payment_global_config', []);  
        $new_config = array_merge($old_config, $new_config);  
        update_site_option('tao_payment_global_config', $new_config);  

        wp_redirect(add_query_arg('updated', 'true', network_admin_url('settings.php?page=tao-payment-global')));  
        exit;  
    }  
}  

new Tao_Payment_Network_Settings();  -e 


==== ./includes/class-wc-payment-ajax.php ====
<?php  
if (!defined('ABSPATH')) exit;  

/**
 * 支付状态查询 AJAX 处理类（安全增强版）
 * @version 1.0.3
 */
class WC_Payment_Ajax {  

    const RATE_LIMIT_INTERVAL = 5; // 限流间隔（秒）  

    public function __construct() {  
        // 微信支付状态轮询  
        add_action('wp_ajax_tao_check_wechatpay_status', [$this, 'handle_payment_status_check']);  
        add_action('wp_ajax_nopriv_tao_check_wechatpay_status', [$this, 'handle_payment_status_check']);  

        // 支付宝状态轮询  
        add_action('wp_ajax_tao_check_alipay_status', [$this, 'handle_payment_status_check']);  
        add_action('wp_ajax_nopriv_tao_check_alipay_status', [$this, 'handle_payment_status_check']);  
    }  

    /**
     * 统一处理支付状态查询请求
     */
    public function handle_payment_status_check() {  
        try {  
            // 基础参数校验
            $order_id = isset($_POST['order_id']) ? absint($_POST['order_id']) : 0;  
            $order_key = isset($_POST['order_key']) ? sanitize_text_field($_POST['order_key']) : '';  
            $gateway = isset($_POST['action']) ? sanitize_text_field($_POST['action']) : '';  
            if ($order_id <= 0 || empty($order_key) || empty($gateway)) {  
                throw new Exception(__('请求参数不完整', 'tao-payment'));  
            }  

            // 限流校验（按支付渠道 + 订单ID）
            $transient_key = 'tao_payment_rate_limit_' . $gateway . '_' . $order_id;  
            if (get_transient($transient_key)) {  
                throw new Exception(__('请求过于频繁，请5秒后再试！', 'tao-payment'));  
            }  
            set_transient($transient_key, true, self::RATE_LIMIT_INTERVAL);  

            // 订单权限校验
            $order = wc_get_order($order_id);  
            if (!$order || $order->get_order_key() !== $order_key) {  
                throw new Exception(__('订单验证失败', 'tao-payment'));  
            }  

            // 根据渠道获取支付状态
            $status = $order->get_status();  
            $paid = $status === 'processing' || $status === 'completed';  

            // 返回标准化响应
            wp_send_json_success([  
                'paid'    => $paid,  
                'status'  => $status,  
                'redirect' => $paid ? $order->get_checkout_order_received_url() : ''  
            ]);  

        } catch (Exception $e) {  
            // 记录详细错误日志
            WC_Payment_Helper::log(  
                '支付状态查询异常：' . $e->getMessage() . ' | 请求数据：' . json_encode($_POST),  
                'error',  
                'ajax'  
            );  

            // 返回客户端错误信息
            wp_send_json_error([  
                'message' => $e->getMessage()  
            ], 400);  
        }  
    }  
}  

new WC_Payment_Ajax();  -e 


==== ./includes/sdk/alipay/Alipay.php ====
<?php  
namespace Alipay;  

use Exception;  
use RuntimeException;  
use InvalidArgumentException;  

/**
 * 支付宝支付 SDK（安全增强版）
 * @version 1.1.0
 */
class Alipay {  

    private $config;  

    public function __construct(array $config) {  
        $this->config = $config;  
        $this->validateConfig();  
    }  

    private function validateConfig() {  
        $required = ['app_id', 'merchant_private_key', 'alipay_public_key'];  
        foreach ($required as $field) {  
            if (empty($this->config[$field])) {  
                throw new InvalidArgumentException(  
                    sprintf(__('支付宝配置缺失：%s', TAO_PAYMENT_TEXT_DOMAIN), $field)  
                );  
            }  
        }  

        // 校验公钥格式  
        if (strpos($this->config['alipay_public_key'], 'BEGIN PUBLIC KEY') === false) {  
            throw new InvalidArgumentException(  
                __('支付宝公钥必须包含PEM头尾标识', TAO_PAYMENT_TEXT_DOMAIN)  
            );  
        }  
    }  

    public function createOrder(array $paymentData) {  
        try {  
            $params = [  
                'app_id'      => $this->config['app_id'],  
                'method'      => 'alipay.trade.page.pay',  
                'format'      => 'JSON',  
                'charset'     => 'utf-8',  
                'sign_type'   => 'RSA2',  
                'timestamp'   => date('Y-m-d H:i:s'),  
                'version'     => '1.0',  
                'notify_url'  => $this->config['notify_url'],  
                'biz_content' => json_encode([  
                    'out_trade_no' => $paymentData['out_trade_no'],  
                    'total_amount' => $paymentData['total_amount'],  
                    'subject'      => $paymentData['subject'],  
                    'product_code' => 'FAST_INSTANT_TRADE_PAY'  
                ], JSON_UNESCAPED_UNICODE)  
            ];  

            $params['sign'] = $this->signRequest($params);  
            return $this->buildAutoSubmitForm($params);  
        } catch (Exception $e) {  
            throw new RuntimeException(  
                __('支付宝订单创建失败：', TAO_PAYMENT_TEXT_DOMAIN) . $e->getMessage()  
            );  
        }  
    }  
    private function signRequest(array $params) {
        ksort($params);
        $signContent = urldecode(http_build_query($params));
        
        $privateKey = openssl_pkey_get_private(
            $this->config['merchant_private_key'],
            $this->config['merchant_key_password'] ?? ''
        );
        if ($privateKey === false) {
            throw new RuntimeException(
                __('私钥解析失败：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
            );
        }
    
        $signature = '';
        if (!openssl_sign($signContent, $signature, $privateKey, OPENSSL_ALGO_SHA256)) {
            openssl_free_key($privateKey);
            throw new RuntimeException(
                __('签名生成失败：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
            );
        }
        openssl_free_key($privateKey);
        return base64_encode($signature);
    }
    
    public function verifyNotification(array $data) {
        if (empty($data['sign']) || empty($data['sign_type'])) {
            throw new InvalidArgumentException(
                __('支付宝回调参数缺失签名或签名类型', TAO_PAYMENT_TEXT_DOMAIN)
            );
        }
    
        $sign = $data['sign'];
        $signType = $data['sign_type'];
        unset($data['sign'], $data['sign_type']);
    
        ksort($data);
        $signContent = urldecode(http_build_query($data));
    
        $publicKey = openssl_pkey_get_public($this->config['alipay_public_key']);
        if ($publicKey === false) {
            throw new RuntimeException(
                __('公钥解析失败：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
            );
        }
    
        $result = openssl_verify(
            $signContent,
            base64_decode($sign),
            $publicKey,
            $signType === 'RSA2' ? OPENSSL_ALGO_SHA256 : OPENSSL_ALGO_SHA1
        );
        openssl_free_key($publicKey);
    
        if ($result === -1) {
            throw new RuntimeException(
                __('验签过程发生错误：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
            );
        }
        return $result === 1;
    }
    
    private function buildAutoSubmitForm($params) {
        $form = '<form id="alipay-submit-form" action="https://openapi.alipay.com/gateway.do" method="POST">';
        foreach ($params as $key => $value) {
            $form .= sprintf(
                '<input type="hidden" name="%s" value="%s" />',
                esc_attr($key),
                esc_attr($value)
            );
        }
        $form .= '</form>';
        $form .= '<script>
            (function() {
                try {
                    document.getElementById("alipay-submit-form").submit();
                } catch (e) {
                    console.error("支付宝表单自动提交失败，请手动操作:", e);
                    alert("支付跳转失败，请手动点击提交按钮！");
                }
            })();
        </script>';
        return $form;
    }  

}  -e 


==== ./includes/sdk/wechatpay/WeChatPay.php ====
<?php  
namespace WeChatPay;  

use Exception;  
use RuntimeException;  
use InvalidArgumentException;  

/**
 * 微信支付 SDK（安全增强版）
 * @version 1.1.0
 */
class WeChatPay {  

    private $config;  

    public function __construct(array $config) {  
        $this->config = $config;  
        $this->validateConfig();  
    }  

    private function validateConfig() {  
        $required = ['mch_id', 'api_key', 'cert_path', 'key_path'];  
        foreach ($required as $field) {  
            if (empty($this->config[$field])) {  
                throw new InvalidArgumentException(  
                    sprintf(__('微信支付配置缺失：%s', TAO_PAYMENT_TEXT_DOMAIN), $field)  
                );  
            }  
        }  

        if (!file_exists($this->config['cert_path']) || !file_exists($this->config['key_path'])) {  
            throw new InvalidArgumentException(  
                __('微信支付证书文件路径无效', TAO_PAYMENT_TEXT_DOMAIN)  
            );  
        }  
    }  

    public function createOrder(array $paymentData) {  
        try {  
            $url = 'https://api.mch.weixin.qq.com/v3/pay/transactions/native';  
            $nonce = $this->generateNonce();  
            $timestamp = time();  
            $body = json_encode([  
                'mchid'        => $this->config['mch_id'],  
                'out_trade_no' => $paymentData['out_trade_no'],  
                'amount'       => [  
                    'total'    => (int)$paymentData['total_fee'],  
                    'currency' => 'CNY'  
                ],  
                'description'  => $paymentData['body'],  
                'notify_url'   => $this->config['notify_url']  
            ], JSON_UNESCAPED_UNICODE);  

            $signature = $this->signRequest($url, $nonce, $timestamp, $body);  
            $headers = $this->buildHeaders($nonce, $timestamp, $signature);  
            $response = $this->post($url, $body, $headers);  

            if ($response['code'] >= 400) {  
                throw new RuntimeException(  
                    sprintf(  
                        __('微信支付请求失败，状态码：%d，响应：%s', TAO_PAYMENT_TEXT_DOMAIN),  
                        $response['code'],  
                        $response['body']  
                    )  
                );  
            }  

            $result = json_decode($response['body'], true);  
            if (json_last_error() !== JSON_ERROR_NONE) {  
                throw new RuntimeException(  
                    __('响应解析失败：', TAO_PAYMENT_TEXT_DOMAIN) . json_last_error_msg()  
                );  
            }  

            if (empty($result['code_url'])) {  
                throw new RuntimeException(  
                    __('微信支付二维码生成失败', TAO_PAYMENT_TEXT_DOMAIN)  
                );  
            }  

            return $result;  
        } catch (Exception $e) {  
            throw new RuntimeException(  
                __('微信支付订单创建失败：', TAO_PAYMENT_TEXT_DOMAIN) . $e->getMessage()  
            );  
        }  
    }  

    // 因长度限制，签名与 HTTP 请private function generateNonce() {
    return bin2hex(random_bytes(16));
}

private function signRequest($url, $nonce, $timestamp, $body) {
    $message = "POST {$url}\n{$timestamp}\n{$nonce}\n" . $body . "\n";
    $privateKey = openssl_pkey_get_private(
        file_get_contents($this->config['key_path']),
        $this->config['api_key']
    );
    if ($privateKey === false) {
        throw new RuntimeException(
            __('私钥解析失败：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
        );
    }

    $signature = '';
    if (!openssl_sign($message, $signature, $privateKey, OPENSSL_ALGO_SHA256)) {
        openssl_free_key($privateKey);
        throw new RuntimeException(
            __('签名生成失败：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
        );
    }
    openssl_free_key($privateKey);
    return base64_encode($signature);
}

private function buildHeaders($nonce, $timestamp, $signature) {
    $serialNo = $this->getCertificateSerial();
    return [
        'Content-Type: application/json',
        'Accept: application/json',
        'User-Agent: TaoPay/' . TAO_PAYMENT_VERSION,
        'Authorization: WECHATPAY2-SHA256-RSA2048 ' . http_build_query([
            'mchid'     => $this->config['mch_id'],
            'nonce'     => $nonce,
            'timestamp' => $timestamp,
            'serial_no' => $serialNo,
            'signature' => $signature
        ])
    ];
}

private function getCertificateSerial() {
    $certContent = file_get_contents($this->config['cert_path']);
    $certInfo = openssl_x509_parse($certContent);
    if (!isset($certInfo['serialNumberHex'])) {
        throw new RuntimeException(
            __('证书序列号解析失败', TAO_PAYMENT_TEXT_DOMAIN)
        );
    }
    return strtoupper($certInfo['serialNumberHex']);
}

private function post($url, $data, $headers) {
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL            => $url,
        CURLOPT_POST           => true,
        CURLOPT_POSTFIELDS     => $data,
        CURLOPT_HTTPHEADER     => $headers,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_SSL_VERIFYPEER => true,
        CURLOPT_SSL_VERIFYHOST => 2,
        CURLOPT_TIMEOUT        => 15,
        CURLOPT_SSLCERT        => $this->config['cert_path'],
        CURLOPT_SSLKEY         => $this->config['key_path']
    ]);

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    curl_close($ch);

    if ($error) {
        throw new RuntimeException(
            __('CURL请求失败：', TAO_PAYMENT_TEXT_DOMAIN) . $error
        );
    }

    return [
        'code' => $httpCode,
        'body' => $response
    ];
}

public function verifySignature($rawData, $signatureHeader) {
    $parts = explode(',', $signatureHeader);
    $signature = $timestamp = $nonce = '';
    foreach ($parts as $part) {
        if (strpos($part, 'signature=') === 0) {
            $signature = substr($part, 10);
        } elseif (strpos($part, 'timestamp=') === 0) {
            $timestamp = substr($part, 11);
        } elseif (strpos($part, 'nonce=') === 0) {
            $nonce = substr($part, 6);
        }
    }

    if (empty($signature) || empty($timestamp) || empty($nonce)) {
        throw new InvalidArgumentException(
            __('微信支付回调签名头不完整', TAO_PAYMENT_TEXT_DOMAIN)
        );
    }

    $publicKey = openssl_pkey_get_public(
        file_get_contents($this->config['cert_path'])
    );
    if ($publicKey === false) {
        throw new RuntimeException(
            __('公钥解析失败：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
        );
    }

    $message = "{$timestamp}\n{$nonce}\n{$rawData}\n";
    $result = openssl_verify(
        $message,
        base64_decode($signature),
        $publicKey,
        OPENSSL_ALGO_SHA256
    );
    openssl_free_key($publicKey);

    if ($result === -1) {
        throw new RuntimeException(
            __('验签过程错误：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string()
        );
    }
    return $result === 1;
}
  -e 


==== ./includes/gateways/class-wc-gateway-wechatpay.php ====
<?php  
if (!defined('ABSPATH')) exit;  

/**
 * 微信支付网关实现（安全增强版）
 * @version 1.2.0
 */
class WC_Gateway_WeChatPay extends WC_Payment_Gateway_TaoPay {  

    public $id = 'wechatpay';  
    protected $sdk;  

    public function __construct() {  
        parent::__construct();  
        $this->method_title = __('微信支付', TAO_PAYMENT_TEXT_DOMAIN);  
        $this->method_description = __('通过微信支付接收款项，支持多站点独立配置', TAO_PAYMENT_TEXT_DOMAIN);  
        $this->icon = TAO_PAYMENT_PLUGIN_URL . 'assets/images/wechatpay.png';  

        // 注册支付页面和回调钩子  
        add_action('woocommerce_receipt_' . $this->id, [$this, 'render_qrcode']);  
        add_action('woocommerce_api_wc_gateway_wechatpay', [$this, 'handle_webhook']);  

        try {  
            $this->init_sdk();  
        } catch (Exception $e) {  
            WC_Payment_Helper::log('微信支付SDK初始化失败：' . $e->getMessage(), 'error', 'wechatpay');  
            $this->enabled = 'no';  
        }  
    }  

    protected function init_sdk() {  
        if ($this->use_global_config) {  
            $mch_id = $this->global_config['wechat_mch_id'] ?? '';  
            $api_key = $this->decrypt_field($this->global_config['wechat_api_key'] ?? '');  
            $cert_path = $this->global_config['wechat_cert_path'] ?? '';  
            $key_path = $this->global_config['wechat_key_path'] ?? '';  
        } else {  
            $mch_id = $this->get_option('mch_id');  
            $api_key = $this->decrypt_field($this->get_option('api_key'));  
            $cert_path = $this->get_option('cert_path');  
            $key_path = $this->get_option('key_path');  
        }  

        // 校验证书文件  
        if (!file_exists($cert_path) || !file_exists($key_path)) {  
            throw new Exception(__('微信支付证书文件未配置', TAO_PAYMENT_TEXT_DOMAIN));  
        }  

        require_once TAO_PAYMENT_PLUGIN_DIR . 'includes/sdk/wechatpay/WeChatPay.php';  
        $this->sdk = new WeChatPay\WeChatPay([  
            'mch_id'      => $mch_id,  
            'api_key'     => $api_key,  
            'cert_path'   => $cert_path,  
            'key_path'    => $key_path,  
            'notify_url' => WC()->api_request_url('WC_Gateway_WeChatPay')  
        ]);  
    }  

    protected function get_site_specific_fields() {  
        return [  
            'mch_id' => [  
                'title'       => __('商户号 (MCH_ID)', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'text',  
                'desc_tip'    => __('微信支付商户平台获取', TAO_PAYMENT_TEXT_DOMAIN),  
                'required'    => true  
            ],  
            'api_key' => [  
                'title'       => __('API密钥', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'textarea',  
                'desc_tip'    => __('APIv3密钥（需加密存储）', TAO_PAYMENT_TEXT_DOMAIN),  
                'custom_attributes' => [  
                    'rows' => 5,  
                    'placeholder' => '••••••••••••••••'  
                ]  
            ],  
            'cert_path' => [  
                'title'       => __('证书文件', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'file',  
                'description' => __('上传apiclient_cert.pem', TAO_PAYMENT_TEXT_DOMAIN)  
            ],  
            'key_path' => [  
                'title'       => __('密钥文件', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'file',  
                'description' => __('上传apiclient_key.pem', TAO_PAYMENT_TEXT_DOMAIN)  
            ]  
        ];  
    }  

    public function process_payment($order_id) {  
        $order = wc_get_order($order_id);  
        try {  
            $payment_data = [  
                'out_trade_no' => $this->generate_trade_no($order),  
                'total_fee'   => $order->get_total() * 100, // 单位：分  
                'body'        => __('订单支付：', TAO_PAYMENT_TEXT_DOMAIN) . $order->get_order_number()  
            ];  

            $result = $this->sdk->createOrder($payment_data);  
            if (empty($result['code_url'])) {  
                throw new Exception(__('微信支付二维码生成失败', TAO_PAYMENT_TEXT_DOMAIN));  
            }  

            $order->update_meta_data('_wechatpay_qrcode_url', $result['code_url']);  
            $order->save();  
            $order->update_status('pending', __('等待微信扫码支付', TAO_PAYMENT_TEXT_DOMAIN));  

            return [  
                'result'   => 'success',  
                'redirect' => $order->get_checkout_payment_url(true)  
            ];  
        } catch (Exception $e) {  
            WC_Payment_Helper::log('微信支付请求失败：' . $e->getMessage(), 'error', 'wechatpay');  
            wc_add_notice(__('支付请求失败：', TAO_PAYMENT_TEXT_DOMAIN) . $e->getMessage(), 'error');  
            return;  
        }  
    }  

    // 因长度限制，剩余代码（回调处理、模板渲染）需分步输出，请回复“继续”  

    private function generate_trade_no($order) {
        $order_number = $order->get_order_number();
        $timestamp = time();
        $nonce = substr(md5(uniqid()), 0, 8);
        return "{$order_number}_{$timestamp}_{$nonce}";
    }
    
    public function render_qrcode($order_id) {
        wp_enqueue_style(
            'tao-payment-frontend',
            TAO_PAYMENT_PLUGIN_URL . 'assets/css/frontend.css',
            [],
            TAO_PAYMENT_VERSION
        );
    
        $order = wc_get_order($order_id);
        $qrcode_url = $order->get_meta('_wechatpay_qrcode_url');
        ?>
        <div class="tao-wechatpay-qrcode">
            <?php if ($qrcode_url) : ?>
                <img src="<?php echo esc_url($qrcode_url); ?>" alt="<?php esc_attr_e('微信支付二维码', TAO_PAYMENT_TEXT_DOMAIN); ?>" />
                <p class="tao-payment-instruction"><?php esc_html_e('请使用微信扫码支付', TAO_PAYMENT_TEXT_DOMAIN); ?></p>
                <div class="tao-payment-status" 
                     data-order-id="<?php echo esc_attr($order_id); ?>"
                     data-order-key="<?php echo esc_attr($order->get_order_key()); ?>">
                    <p><?php esc_html_e('支付状态检测中...', TAO_PAYMENT_TEXT_DOMAIN); ?></p>
                    <button class="tao-retry-button" style="display: none;">
                        <?php esc_html_e('重试', TAO_PAYMENT_TEXT_DOMAIN); ?>
                    </button>
                </div>
                <script>
                    (function($) {
                        const MAX_RETRIES = 10;
                        let retryCount = 0;
    
                        function checkPaymentStatus() {
                            $.ajax({
                                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                                method: 'POST',
                                data: {
                                    action: 'tao_check_wechatpay_status',
                                    order_id: <?php echo $order_id; ?>,
                                    order_key: '<?php echo $order->get_order_key(); ?>'
                                },
                                dataType: 'json'
                            }).done(response => {
                                if (response.success && response.data.status === 'completed') {
                                    window.location.href = '<?php echo esc_url($order->get_checkout_order_received_url()); ?>';
                                } else if (retryCount < MAX_RETRIES) {
                                    retryCount++;
                                    setTimeout(checkPaymentStatus, 5000);
                                } else {
                                    $('.tao-retry-button').show();
                                }
                            }).fail(() => {
                                $('.tao-retry-button').show();
                            });
                        }
    
                        // 启动轮询
                        checkPaymentStatus();
                        $('.tao-retry-button').click(checkPaymentStatus);
                    })(jQuery);
                </script>
            <?php else : ?>
                <div class="tao-payment-error">
                    <p><?php esc_html_e('错误：无法生成支付二维码', TAO_PAYMENT_TEXT_DOMAIN); ?></p>
                    <a href="<?php echo esc_url(wc_get_checkout_url()); ?>">
                        <?php esc_html_e('返回收银台', TAO_PAYMENT_TEXT_DOMAIN); ?>
                    </a>
                </div>
            <?php endif; ?>
        </div>
        <?php
    }
    
    public function handle_webhook() {
        $rawData = file_get_contents('php://input');
        $signatureHeader = $_SERVER['HTTP_WECHATPAY_SIGNATURE'] ?? '';
    
        try {
            if (!$this->sdk->verifySignature($rawData, $signatureHeader)) {
                throw new Exception(__('微信支付回调签名验证失败', TAO_PAYMENT_TEXT_DOMAIN));
            }
    
            $data = json_decode($rawData, true);
            $requiredFields = ['out_trade_no', 'amount.total', 'transaction_id'];
            foreach ($requiredFields as $field) {
                if (!isset($data['resource'][$field])) {
                    throw new Exception(sprintf(__('缺少必要字段: %s', TAO_PAYMENT_TEXT_DOMAIN), $field));
                }
            }
    
            $order = wc_get_order($data['resource']['out_trade_no']);
            if (!$order || !$order->get_id()) {
                throw new Exception(__('订单不存在', TAO_PAYMENT_TEXT_DOMAIN));
            }
    
            if ($data['event_type'] === 'TRANSACTION.SUCCESS') {
                $order->payment_complete($data['resource']['transaction_id']);
                $order->add_order_note(
                    __('微信支付交易号：', TAO_PAYMENT_TEXT_DOMAIN) . sanitize_text_field($data['resource']['transaction_id'])
                );
                echo 'success';
            } else {
                $order->update_status(
                    'failed',
                    __('微信支付失败：', TAO_PAYMENT_TEXT_DOMAIN) . sanitize_text_field($data['summary'] ?? '')
                );
                echo 'fail';
            }
        } catch (Exception $e) {
            WC_Payment_Helper::log(
                '微信回调处理失败：' . $e->getMessage(),
                'error',
                'wechatpay'
            );
            status_header(400);
            echo esc_html($e->getMessage());
        }
        exit;
    }
    
    public function process_admin_options() {
        parent::process_admin_options();
        $this->handle_cert_upload('cert_path');
        $this->handle_cert_upload('key_path');
        try {
            $this->init_sdk();
        } catch (Exception $e) {
            WC_Admin_Settings::add_error($e->getMessage());
        }
    }
    
    protected function handle_cert_upload($field) {
        $field_name = $this->plugin_id . $this->id . '_' . $field;
        if (!empty($_FILES[$field_name]['tmp_name'])) {
            $upload_dir = wp_upload_dir();
            $target_dir = $upload_dir['basedir'] . '/tao-payment-certs/wechat/';
            wp_mkdir_p($target_dir);
    
            // 校验文件类型
            $finfo = finfo_open(FILEINFO_MIME_TYPE);
            $mime = finfo_file($finfo, $_FILES[$field_name]['tmp_name']);
            finfo_close($finfo);
            if (!in_array($mime, ['application/x-x509-ca-cert', 'text/plain'])) {
                throw new Exception(__('仅允许上传PEM格式证书', TAO_PAYMENT_TEXT_DOMAIN));
            }
    
            // 生成唯一文件名
            $ext = pathinfo($_FILES[$field_name]['name'], PATHINFO_EXTENSION);
            $new_name = 'cert_' . bin2hex(random_bytes(8)) . '.' . $ext;
            $target_path = $target_dir . $new_name;
    
            if (!move_uploaded_file($_FILES[$field_name]['tmp_name'], $target_path)) {
                throw new Exception(__('证书上传失败：目录不可写', TAO_PAYMENT_TEXT_DOMAIN));
            }
            $this->update_option($field, $target_path);
        }
    }
}  -e 


==== ./includes/gateways/class-wc-gateway-alipay.php ====
<?php  
if (!defined('ABSPATH')) exit;  

/**
 * 支付宝支付网关实现（安全增强版）
 * @version 1.2.0
 */
class WC_Gateway_Alipay extends WC_Payment_Gateway_TaoPay {  

    public $id = 'alipay';  
    protected $sdk;  

    public function __construct() {  
        parent::__construct();  
        $this->method_title = __('支付宝', TAO_PAYMENT_TEXT_DOMAIN);  
        $this->method_description = __('通过支付宝接收款项，支持多站点独立配置', TAO_PAYMENT_TEXT_DOMAIN);  
        $this->icon = TAO_PAYMENT_PLUGIN_URL . 'assets/images/alipay.png';  

        // 注册支付页面和回调钩子  
        add_action('woocommerce_receipt_' . $this->id, [$this, 'render_payment_form']);  
        add_action('woocommerce_api_wc_gateway_alipay', [$this, 'handle_webhook']);  

        try {  
            $this->init_sdk();  
        } catch (Exception $e) {  
            WC_Payment_Helper::log($e->getMessage(), 'error', 'alipay');  
            $this->enabled = 'no';  
        }  
    }  

    protected function init_sdk() {  
        if ($this->use_global_config) {  
            $app_id = $this->global_config['alipay_app_id'] ?? '';  
            $merchant_private_key = $this->decrypt_field($this->global_config['alipay_merchant_private_key'] ?? '');  
            $alipay_public_key = $this->global_config['alipay_public_key'] ?? '';  
        } else {  
            $app_id = $this->get_option('app_id');  
            $merchant_private_key = $this->decrypt_field($this->get_option('merchant_private_key'));  
            $alipay_public_key = $this->get_option('alipay_public_key');  
        }  

        // 校验公钥文件是否存在  
        if (!file_exists($alipay_public_key)) {  
            throw new Exception(__('支付宝公钥文件未配置', TAO_PAYMENT_TEXT_DOMAIN));  
        }  

        // 格式化公钥内容  
        $public_key_content = $this->normalize_public_key(file_get_contents($alipay_public_key));  

        require_once TAO_PAYMENT_PLUGIN_DIR . 'includes/sdk/alipay/Alipay.php';  
        $this->sdk = new Alipay\Alipay([  
            'app_id'                => $app_id,  
            'merchant_private_key'  => $merchant_private_key,  
            'alipay_public_key'     => $public_key_content,  
            'notify_url'           => WC()->api_request_url('WC_Gateway_Alipay')  
        ]);  
    }  

    private function normalize_public_key($content) {  
        if (strpos($content, 'BEGIN PUBLIC KEY') === false) {  
            return "-----BEGIN PUBLIC KEY-----\n" .  
                   chunk_split(trim($content), 64, "\n") .  
                   "-----END PUBLIC KEY-----";  
        }  
        return $content;  
    }  

    protected function get_site_specific_fields() {  
        return [  
            'app_id' => [  
                'title'       => __('应用ID (APP_ID)', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'text',  
                'desc_tip'    => __('支付宝开放平台获取的APP_ID', TAO_PAYMENT_TEXT_DOMAIN),  
                'required'    => true  
            ],  
            'merchant_private_key' => [  
                'title'       => __('商户私钥', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'textarea',  
                'desc_tip'    => __('商户私钥（需加密存储）', TAO_PAYMENT_TEXT_DOMAIN),  
                'custom_attributes' => [  
                    'rows' => 5,  
                    'placeholder' => '-----BEGIN PRIVATE KEY-----...'  
                ]  
            ],  
            'alipay_public_key' => [  
                'title'       => __('支付宝公钥文件', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'file',  
                'description' => __('上传支付宝公钥文件（alipay_public_key.pem）', TAO_PAYMENT_TEXT_DOMAIN)  
            ]  
        ];  
    }  

    public function process_payment($order_id) {  
        $order = wc_get_order($order_id);  
        try {  
            $payment_data = [  
                'out_trade_no' => $this->generate_trade_no($order),  
                'total_amount' => $order->get_total(),  
                'subject'      => __('订单支付：', TAO_PAYMENT_TEXT_DOMAIN) . $order->get_order_number()  
            ];  

            $form = $this->sdk->createOrder($payment_data);  
            $order->update_meta_data('_alipay_payment_form', $form);  
            $order->save();  
            $order->update_status('pending', __('等待支付宝支付确认', TAO_PAYMENT_TEXT_DOMAIN));  

            return [  
                'result'   => 'success',  
                'redirect' => $order->get_checkout_payment_url(true)  
            ];  
        } catch (Exception $e) {  
            WC_Payment_Helper::log('支付宝请求失败: ' . $e->getMessage(), 'error', 'alipay');  
            wc_add_notice(__('支付请求失败：', TAO_PAYMENT_TEXT_DOMAIN) . $e->getMessage(), 'error');  
            return;  
        }  
    }  

    // 因长度限制，剩余代码（如回调处理、模板渲染）需分步输出，请回复“继续”  


    private function generate_trade_no($order) {
        $order_number = $order->get_order_number();
        $timestamp = time();
        $nonce = substr(md5(uniqid()), 0, 8);
        return "{$order_number}_{$timestamp}_{$nonce}";
    }
    
    public function render_payment_form($order_id) {
        wp_enqueue_style(
            'tao-payment-frontend',
            TAO_PAYMENT_PLUGIN_URL . 'assets/css/frontend.css',
            [],
            TAO_PAYMENT_VERSION
        );
    
        $order = wc_get_order($order_id);
        $form = $order->get_meta('_alipay_payment_form');
        ?>
        <div class="tao-alipay-payment-form">
            <?php if ($form) : ?>
                <?php echo wp_kses($form, [
                    'form' => ['id' => true, 'action' => true, 'method' => true],
                    'input' => ['type' => true, 'name' => true, 'value' => true],
                    'script' => []
                ]); ?>
                <script>
                    try {
                        document.getElementById('alipay-submit').submit();
                    } catch (e) {
                        console.error('支付宝表单提交失败:', e);
                        window.location.reload();
                    }
                </script>
            <?php else : ?>
                <div class="tao-payment-error">
                    <p><?php esc_html_e('错误：支付表单生成失败，请联系客服！', TAO_PAYMENT_TEXT_DOMAIN); ?></p>
                    <a href="<?php echo esc_url(wc_get_checkout_url()); ?>">
                        <?php esc_html_e('返回收银台', TAO_PAYMENT_TEXT_DOMAIN); ?>
                    </a>
                </div>
            <?php endif; ?>
        </div>
        <?php
    }
    
    public function handle_webhook() {
        try {
            $data = $_POST;
            if (!$this->sdk->verifyNotification($data)) {
                throw new Exception(__('支付宝回调签名验证失败', TAO_PAYMENT_TEXT_DOMAIN));
            }
    
            $order = wc_get_order($data['out_trade_no']);
            if (!$order || !$order->get_id()) {
                throw new Exception(__('订单不存在', TAO_PAYMENT_TEXT_DOMAIN));
            }
    
            switch ($data['trade_status']) {
                case 'TRADE_SUCCESS':
                    $order->payment_complete($data['trade_no']);
                    $order->add_order_note(
                        __('支付宝交易号：', TAO_PAYMENT_TEXT_DOMAIN) . sanitize_text_field($data['trade_no'])
                    );
                    echo 'success';
                    break;
                default:
                    $order->update_status(
                        'failed',
                        __('支付宝支付失败：', TAO_PAYMENT_TEXT_DOMAIN) . sanitize_text_field($data['msg'] ?? '')
                    );
                    echo 'fail';
            }
        } catch (Exception $e) {
            WC_Payment_Helper::log(
                '支付宝回调处理失败：' . $e->getMessage(),
                'error',
                'alipay'
            );
            status_header(500);
            echo esc_html($e->getMessage());
        }
        exit;
    }
    
    public function process_admin_options() {
        parent::process_admin_options();
        $this->handle_cert_upload('alipay_public_key');
        try {
            $this->init_sdk();
        } catch (Exception $e) {
            WC_Admin_Settings::add_error($e->getMessage());
        }
    }
    
    protected function handle_cert_upload($field) {
        $field_name = $this->plugin_id . $this->id . '_' . $field;
        if (!empty($_FILES[$field_name]['tmp_name'])) {
            $upload_dir = wp_upload_dir();
            $target_dir = $upload_dir['basedir'] . '/tao-payment-certs/alipay/';
            wp_mkdir_p($target_dir);
    
            // 校验文件类型
            $finfo = finfo_open(FILEINFO_MIME_TYPE);
            $mime = finfo_file($finfo, $_FILES[$field_name]['tmp_name']);
            finfo_close($finfo);
            if (!in_array($mime, ['text/plain', 'application/x-x509-ca-cert'])) {
                throw new Exception(__('仅允许上传PEM格式文件', TAO_PAYMENT_TEXT_DOMAIN));
            }
    
            // 防覆盖攻击：生成唯一文件名
            $ext = pathinfo($_FILES[$field_name]['name'], PATHINFO_EXTENSION);
            $new_name = 'alipay_pub_' . bin2hex(random_bytes(8)) . '.' . $ext;
            $target_path = $target_dir . $new_name;
    
            if (!move_uploaded_file($_FILES[$field_name]['tmp_name'], $target_path)) {
                throw new Exception(__('文件保存失败，请检查目录权限', TAO_PAYMENT_TEXT_DOMAIN));
            }
            $this->update_option($field, $target_path);
        }
    }
}  -e 


==== ./includes/class-wc-payment-gateway-taopay.php ====
<?php  
if (!defined('ABSPATH')) exit;  

/**
 * 支付网关基类（支持多站点与安全增强）
 * @version 1.1.3
 */
abstract class WC_Payment_Gateway_TaoPay extends WC_Payment_Gateway {  

    protected $use_global_config = false;  
    protected $global_config = [];  

    public function __construct() {  
        $this->has_fields = false;  
        $this->supports = ['products'];  
        $this->load_global_config();  

        // 初始化配置  
        $this->init_form_fields();  
        $this->init_settings();  

        // 更新配置状态  
        $this->title = $this->get_option('title');  
        $this->description = $this->get_option('description');  
        $this->enabled = $this->get_option('enabled');  
        $this->use_global_config = $this->get_option('use_global_config') === 'yes';  

        // 注册保存钩子  
        add_action('woocommerce_update_options_payment_gateways_' . $this->id, [$this, 'process_admin_options']);  
    }  

    protected function load_global_config() {  
        $this->global_config = is_multisite() ?  
            get_site_option('tao_payment_global_config', []) :  
            get_option('tao_payment_global_config', []);  
    }  

    public function init_form_fields() {  
        // 根据全局配置是否启用全局模式来禁用子站配置
        $this->form_fields = [  
            'enabled' => [  
                'title'   => __('启用/禁用', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'    => 'checkbox',  
                'label'   => __('启用此支付方式', TAO_PAYMENT_TEXT_DOMAIN),  
                'default' => 'no'  
            ],  
            'title' => [  
                'title'       => __('显示名称', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'text',  
                'description' => __('客户在结账时看到的名称', TAO_PAYMENT_TEXT_DOMAIN),  
                'default'     => $this->method_title,  
                'desc_tip'    => true  
            ],  
            'use_global_config' => [  
                'title'       => __('使用全局配置', TAO_PAYMENT_TEXT_DOMAIN),  
                'type'        => 'checkbox',  
                'label'       => __('继承网络级全局配置', TAO_PAYMENT_TEXT_DOMAIN),  
                'default'     => 'no',  
                'description' => current_user_can('manage_network_options') ?  
                    __('超级管理员可修改全局配置', TAO_PAYMENT_TEXT_DOMAIN) : ''  
            ]  
        ];  

        // 如果启用了全局模式，禁用 use_global_config 字段
        if ($this->global_config['force_global_mode'] === 'yes') {
            $this->form_fields['use_global_config']['custom_attributes'] = ['disabled' => 'disabled'];
        }

        // 合并子类字段  
        $this->form_fields = array_merge($this->form_fields, $this->get_site_specific_fields());  
    }  

    abstract protected function get_site_specific_fields();  

    protected function decrypt_field($encrypted) {  
        if (empty($encrypted)) return '';  

        if (!defined('AUTH_SALT') || strlen(AUTH_SALT) < 32) {  
            throw new Exception(__('AUTH_SALT 必须为32位以上字符串', TAO_PAYMENT_TEXT_DOMAIN));  
        }  

        $key = substr(AUTH_SALT, 0, 32);  
        $ciphertext = base64_decode($encrypted);  
        $iv_length = openssl_cipher_iv_length('aes-256-gcm');  
        $iv = substr($ciphertext, 0, $iv_length);  
        $tag = substr($ciphertext, $iv_length, 16);  
        $payload = substr($ciphertext, $iv_length + 16);  

        $decrypted = openssl_decrypt(  
            $payload,  
            'aes-256-gcm',  
            $key,  
            OPENSSL_RAW_DATA,  
            $iv,  
            $tag  
        );  

        if ($decrypted === false) {  
            WC_Payment_Helper::log(  
                '解密失败: ' . openssl_error_string(),  
                'error',  
                'security'  
            );  
            return '';  
        }  

        return $decrypted;  
    }  
    public function generate_file_html($key, $data) {
        $field_key = $this->get_field_key($key);
        $value = $this->get_option($key);
        $description = $data['description'] ?? '';
    
        ob_start();
        ?>
        <tr valign="top">
            <th scope="row" class="titledesc">
                <label for="<?php echo esc_attr($field_key); ?>">
                    <?php echo wp_kses_post($data['title']); ?>
                </label>
            </th>
            <td class="forminp">
                <input
                    type="file"
                    name="<?php echo esc_attr($field_key); ?>"
                    id="<?php echo esc_attr($field_key); ?>"
                    accept=".pem, .crt"
                />
                <?php if ($value && file_exists($value)) : ?>
                    <p class="description">
                        <?php printf(
                            __('当前文件：%s', TAO_PAYMENT_TEXT_DOMAIN),
                            esc_html(basename($value))
                        ); ?>
                    </p>
                <?php endif; ?>
                <?php if (!empty($description)) : ?>
                    <p class="description"><?php echo wp_kses_post($description); ?></p>
                <?php endif; ?>
            </td>
        </tr>
        <?php
        return ob_get_clean();
    }
    
    // 文件上传校验逻辑
    public function validate_file_field($key, $value) {
        $field_name = $this->plugin_id . $this->id . '_' . $key;
    
        if (!empty($_FILES[$field_name]['tmp_name'])) {
            $file_tmp = $_FILES[$field_name]['tmp_name'];
            $file_name = $_FILES[$field_name]['name'];
            $file_type = $_FILES[$field_name]['type'];
    
            // 严格校验文件类型
            $allowed_mimes = ['text/plain', 'application/x-x509-ca-cert'];
            if (!in_array($file_type, $allowed_mimes)) {
                WC_Admin_Settings::add_error(
                    __('文件类型错误：仅允许上传 PEM 或 CRT 格式证书', TAO_PAYMENT_TEXT_DOMAIN)
                );
                return $value; // 返回旧值，阻止无效更新
            }
    
            // 防路径遍历攻击
            $file_name = sanitize_file_name($file_name);
            $upload_dir = wp_upload_dir();
            $target_dir = $upload_dir['basedir'] . '/tao-payment-certs/';
            wp_mkdir_p($target_dir);
            $target_path = $target_dir . $file_name;
    
            if (!move_uploaded_file($file_tmp, $target_path)) {
                WC_Admin_Settings::add_error(
                    __('文件上传失败：请检查目录权限', TAO_PAYMENT_TEXT_DOMAIN)
                );
            }
            return $target_path;
        }
        return $value;
    }
}
-e 


==== ./includes/helper/class-wc-payment-helper.php ====
<?php  
if (!defined('ABSPATH')) exit;  

/**
 * 支付辅助工具类（安全增强版）
 * @version 1.1.0
 */
class WC_Payment_Helper {  

    /**
     * 加密敏感数据（使用 AES-256-GCM）
     */
    public static function encrypt_data($data) {  
        if (!defined('AUTH_SALT') || strlen(AUTH_SALT) < 32) {  
            throw new Exception(__('AUTH_SALT 必须为32位以上字符串', TAO_PAYMENT_TEXT_DOMAIN));  
        }  

        $key = substr(AUTH_SALT, 0, 32);  
        $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('aes-256-gcm'));  
        $tag = '';  

        $encrypted = openssl_encrypt(  
            $data,  
            'aes-256-gcm',  
            $key,  
            OPENSSL_RAW_DATA,  
            $iv,  
            $tag  
        );  

        if ($encrypted === false) {  
            throw new Exception(__('加密失败：', TAO_PAYMENT_TEXT_DOMAIN) . openssl_error_string());  
        }  

        return base64_encode($iv . $tag . $encrypted);  
    }  

    /**
     * 记录支付日志（支持分级）
     */
    public static function log($message, $level = 'info', $source = 'core') {  
        $logger = wc_get_logger();  
        $context = ['source' => 'tao-payment-' . $source];  

        switch ($level) {  
            case 'error':  
                $logger->error($message, $context);  
                break;  
            case 'warning':  
                $logger->warning($message, $context);  
                break;  
            default:  
                $logger->info($message, $context);  
        }  
    }  

    /**
     * 验证 IP 地址（过滤私有和保留地址）
     */
    public static function validate_ip($ip) {  
        $flags = FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE;  
        return filter_var($ip, FILTER_VALIDATE_IP, $flags) !== false;  
    }  

    /**
     * 安全重定向（防止开放重定向攻击）
     */
    public static function safe_redirect($url) {  
        if (wp_validate_redirect($url)) {  
            wp_redirect($url);  
            exit;  
        }  
        throw new Exception(__('非法重定向地址', TAO_PAYMENT_TEXT_DOMAIN));  
    }  
}  -e 


==== ./tao-payment.php ====
<?php
/**
 * Plugin Name: Tao Payment Gateway
 * Plugin URI: https://your-domain.com/
 * Description: 支付宝与微信支付网关插件（多站点支持）
 * Version: 1.1.1
 * Author: Your Name
 * Author URI: https://your-domain.com/
 * License: GPL-3.0+
 * Text Domain: tao-payment
 * Domain Path: /languages/
 * Requires at least: 5.6
 * Requires PHP: 7.4
 */

defined('ABSPATH') || exit;

// 定义插件常量
define('TAO_PAYMENT_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('TAO_PAYMENT_PLUGIN_URL', plugin_dir_url(__FILE__));
define('TAO_PAYMENT_VERSION', '1.1.1');
define('TAO_PAYMENT_TEXT_DOMAIN', 'tao-payment');

// 拦截非法目录访问
add_action('init', function() {
    if (preg_match('#/(tao-payment-certs|secure_certs)/#i', $_SERVER['REQUEST_URI'])) {
        status_header(403);
        exit(__('禁止访问安全目录', TAO_PAYMENT_TEXT_DOMAIN));
    }
});

// 加载核心支付类
add_action('plugins_loaded', function() {
    if (!class_exists('WC_Payment_Gateway')) {
        add_action('admin_notices', function() {
            echo '<div class="error"><p>';
            _e('Tao Payment Gateway 需要 WooCommerce 插件激活！', TAO_PAYMENT_TEXT_DOMAIN);
            echo '</p></div>';
        });
        return;
    }

    // 加载核心类文件
    require_once TAO_PAYMENT_PLUGIN_DIR . 'includes/helper/class-wc-payment-helper.php';
    require_once TAO_PAYMENT_PLUGIN_DIR . 'includes/class-wc-payment-gateway-taopay.php';
    require_once TAO_PAYMENT_PLUGIN_DIR . 'includes/gateways/class-wc-gateway-alipay.php';
    require_once TAO_PAYMENT_PLUGIN_DIR . 'includes/gateways/class-wc-gateway-wechatpay.php';

    // 注册支付方式
    add_filter('woocommerce_payment_gateways', function($methods) {
        $methods[] = 'WC_Gateway_Alipay';
        $methods[] = 'WC_Gateway_WeChatPay';
        return $methods;
    });

        // 加载网络级配置管理类（仅在多站点环境下）
        if (is_multisite()) {
            require_once TAO_PAYMENT_PLUGIN_DIR . 'includes/admin/network-settings.php';
        }
});

// 国际化支持
add_action('init', function() {
    load_plugin_textdomain(
        TAO_PAYMENT_TEXT_DOMAIN,
        false,
        dirname(plugin_basename(__FILE__)) . '/languages/'
    );
});

// 定时清理过期证书（每日执行）
register_activation_hook(__FILE__, function() {
    if (!wp_next_scheduled('tao_payment_daily_cleanup')) {
        wp_schedule_event(time(), 'daily', 'tao_payment_daily_cleanup');
    }
});

add_action('tao_payment_daily_cleanup', function() {
    $upload_dir = wp_upload_dir();
    $cert_dirs = [
        $upload_dir['basedir'] . '/tao-payment-certs/alipay/',
        $upload_dir['basedir'] . '/tao-payment-certs/wechat/'
    ];

    foreach ($cert_dirs as $dir) {
        if (!is_dir($dir)) continue;
        $files = glob($dir . 'cert_*');
        foreach ($files as $file) {
            if (file_exists($file) && (time() - filemtime($file)) > 30 * DAY_IN_SECONDS) {
                @unlink($file);
            }
        }
    }
});

// 停用插件时清理定时任务
register_deactivation_hook(__FILE__, function() {
    wp_clear_scheduled_hook('tao_payment_daily_cleanup');
});

// 加载前端资源
add_action('wp_enqueue_scripts', function() {
    if (is_checkout()) {
        wp_enqueue_style(
            'tao-payment-frontend',
            TAO_PAYMENT_PLUGIN_URL . 'assets/css/frontend.css',
            [],
            TAO_PAYMENT_VERSION
        );
        wp_enqueue_script(
            'tao-payment-frontend',
            TAO_PAYMENT_PLUGIN_URL . 'assets/js/frontend.js',
            ['jquery'],
            TAO_PAYMENT_VERSION,
            ['in_footer' => true, 'strategy' => 'defer']
        );
    }
});

// 加载后台资源
add_action('admin_enqueue_scripts', function($hook) {
    if ($hook === 'woocommerce_page_wc-settings') {
        wp_enqueue_style(
            'tao-payment-admin',
            TAO_PAYMENT_PLUGIN_URL . 'assets/css/admin.css',
            [],
            TAO_PAYMENT_VERSION
        );
        wp_enqueue_script(
            'tao-payment-admin',
            TAO_PAYMENT_PLUGIN_URL . 'assets/js/admin.js',
            ['jquery'],
            TAO_PAYMENT_VERSION,
            ['in_footer' => true, 'strategy' => 'defer']
        );
        wp_localize_script('tao-payment-admin', 'tao_admin_params', [
            'nonce' => wp_create_nonce('tao_payment_admin_nonce')
        ]);
    }
});-e 


==== ./uninstall.php ====
<?php  
if (!defined('WP_UNINSTALL_PLUGIN')) exit;  

// 清理网络级配置（多站点）  
if (is_multisite()) {  
    delete_site_option('tao_payment_global_config');  
    $sites = get_sites(['number' => 0]);  
    foreach ($sites as $site) {  
        switch_to_blog($site->blog_id);  
        delete_option('woocommerce_alipay_settings');  
        delete_option('woocommerce_wechatpay_settings');  
        delete_option('tao_payment_global_config');  
        restore_current_blog();  
    }  
} else {  
    delete_option('woocommerce_alipay_settings');  
    delete_option('woocommerce_wechatpay_settings');  
    delete_option('tao_payment_global_config');  
}  

// 清理上传的证书文件  
$upload_dir = wp_upload_dir();  
$cert_dirs = [  
    $upload_dir['basedir'] . '/tao-payment-certs/alipay/',  
    $upload_dir['basedir'] . '/tao-payment-certs/wechat/'  
];  

foreach ($cert_dirs as $dir) {  
    if (!is_dir($dir)) continue;  
    $files = glob($dir . 'cert_*');  
    foreach ($files as $file) {  
        if (is_file($file)) @unlink($file);  
    }  
    @rmdir($dir);  
}  

// 清理定时任务  
if ($timestamp = wp_next_scheduled('tao_payment_daily_cleanup')) {  
    wp_unschedule_event($timestamp, 'tao_payment_daily_cleanup');  
}  -e 


==== ./templates/payment/alipay-form.php ====
<?php
/**
 * 支付宝支付模板（安全增强+状态轮询版）
 * @version 1.2.0
 */
if (!defined('ABSPATH')) exit;

// 防御性校验增强
if (!is_numeric($order_id) wp_die(__('非法订单ID', 'tao-payment'));

$order = wc_get_order(absint($order_id));
if (!$order || !$order->get_id()) wp_die(__('订单不存在', 'tao-payment'));

// 权限验证
if ($order->get_customer_id() != get_current_user_id()) {
    wp_die(__('订单访问权限错误', 'tao-payment'));
}

$form = $order->get_meta('_alipay_payment_form');
wp_enqueue_script('tao-payment-status', TAO_PAYMENT_URL.'assets/js/alipay-status.js', [], '1.2.0');
wp_localize_script('tao-payment-status', 'taoPaymentData', [
    'orderId'  => $order->get_id(),
    'orderKey' => esc_js($order->get_order_key()),
    'nonce'    => wp_create_nonce('alipay_status_check'),
    'redirect' => esc_url($order->get_checkout_order_received_url())
]);
?>

<div class="tao-payment-alipay-form">
    <?php if (!empty($form)) : ?>
        <div class="payment-redirect">
            <?php echo wp_kses($form, [
                'form' => ['id' => true, 'action' => true, 'method' => true],
                'input' => ['type' => true, 'name' => true, 'value' => true, 'data-*' => true],
                'script' => ['src' => true]
            ]); ?>
            <div class="loading-indicator">
                <div class="spinner"></div>
                <p><?php esc_html_e('正在准备支付跳转...', 'tao-payment'); ?></p>
            </div>
        </div>
        
        <div class="tao-payment-status" 
             data-order-id="<?php echo esc_attr($order->get_id()); ?>"
             data-order-key="<?php echo esc_attr($order->get_order_key()); ?>">
            <p class="status-text"><?php esc_html_e('支付状态监控中...', 'tao-payment'); ?></p>
            <div class="retry-ui" style="display:none;">
                <button class="tao-retry-btn"><?php esc_html_e('重试检测', 'tao-payment'); ?></button>
                <a href="<?php echo esc_url(wc_get_checkout_url()); ?>" class="tao-checkout-link">
                    <?php esc_html_e('返回收银台', 'tao-payment'); ?>
                </a>
            </div>
        </div>

    <?php else : ?>
        <div class="tao-payment-error">
            <p class="error-code"><?php esc_html_e('错误 EP-409：支付通道初始化失败', 'tao-payment'); ?></p>
            <div class="action-buttons">
                <button onclick="location.reload()"><?php esc_html_e('刷新重试', 'tao-payment'); ?></button>
                <a href="<?php echo esc_url(wc_get_cart_url()); ?>" class="tao-cart-link">
                    <?php esc_html_e('返回购物车', 'tao-payment'); ?>
                </a>
            </div>
        </div>
    <?php endif; ?>
</div>-e 


==== ./templates/payment/wechat-redirect.php ====
<?php  
/**  
 * 微信支付二维码展示模板（优化轮询逻辑）  
 * @version 1.0.1  
 */  
if (!defined('ABSPATH')) exit;  

$order = wc_get_order($order_id);  
$code_url = $order->get_meta('_wechatpay_code_url');  
$order_key = $order->get_order_key();  
?>  

<div class="tao-payment-wechat-redirect">  
    <?php if ($code_url) : ?>  
        <p><?php esc_html_e('请使用微信扫描下方二维码完成支付', 'tao-payment'); ?></p>  
        <img src="<?php echo esc_url($code_url); ?>" alt="<?php esc_attr_e('微信支付二维码', 'tao-payment'); ?>" />  
        <div class="tao-payment-status-check" data-order-id="<?php echo esc_attr($order_id); ?>" data-order-key="<?php echo esc_attr($order_key); ?>">  
            <p class="status-message"><?php esc_html_e('支付状态检测中...', 'tao-payment'); ?></p>  
            <button class="tao-retry-button" style="display: none;"><?php esc_html_e('重新检查状态', 'tao-payment'); ?></button>  
        </div>  
    <?php else : ?>  
        <div class="tao-payment-error">  
            <p><?php esc_html_e('支付链接生成失败，请刷新页面！', 'tao-payment'); ?></p>  
        </div>  
    <?php endif; ?>  
</div>  

<script>  
(function($) {  
    let retryCount = 0;  
    const maxRetries = 5;        // 最大重试次数  
    const retryInterval = 5000;   // 轮询间隔（毫秒）  

    function checkPaymentStatus() {  
        const $statusMessage = $('.status-message');  
        const $retryButton = $('.tao-retry-button');  

        $.ajax({  
            url: '<?php echo admin_url('admin-ajax.php'); ?>',  
            method: 'POST',  
            data: {  
                'action': 'tao_check_wechatpay_status',  
                'order_id': <?php echo $order_id; ?>,  
                'order_key': '<?php echo $order_key; ?>'  
            },  
            dataType: 'json'  
        }).done(function(response) {  
            if (response.success) {  
                if (response.data.status === 'completed') {  
                    window.location.href = '<?php echo esc_url($order->get_checkout_order_received_url()); ?>';  
                } else {  
                    retryCount++;  
                    if (retryCount >= maxRetries) {  
                        $statusMessage.html('<?php esc_html_e('支付超时，请检查微信订单是否完成！', 'tao-payment'); ?>');  
                        $retryButton.show();  
                    } else {  
                        $statusMessage.html('<?php esc_html_e('支付状态检测中...', 'tao-payment'); ?>');  
                        setTimeout(checkPaymentStatus, retryInterval);  
                    }  
                }  
            } else {  
                $statusMessage.html('<span class="error"><?php esc_html_e('状态查询失败：', 'tao-payment'); ?>' + (response.data.message || '未知错误') + '</span>');  
                $retryButton.show();  
            }  
        }).fail(function(jqXHR, textStatus) {  
            $statusMessage.html('<span class="error"><?php esc_html_e('网络错误，请检查连接！', 'tao-payment'); ?></span>');  
            $retryButton.show();  
        });  
    }  

    // 手动重试逻辑  
    $(document).on('click', '.tao-retry-button', function() {  
        retryCount = 0;  
        $(this).hide();  
        $('.status-message').html('<?php esc_html_e('重新检测支付状态...', 'tao-payment'); ?>');  
        checkPaymentStatus();  
    });  

    // 启动轮询  
    $(document).ready(function() {  
        setTimeout(checkPaymentStatus, retryInterval);  
    });  
})(jQuery);  
</script>  -e 


==== ./templates/payment/wechatpay.php ====
<?php  
/**  
 * 微信支付页面模板  
 */  
if (!defined('ABSPATH')) exit;  

$order = wc_get_order($order_id);  
?>  

<div class="tao-payment-instruction">  
    <p><?php esc_html_e('请使用微信扫描以下二维码完成支付：', 'tao-payment'); ?></p>  
    <img src="<?php echo esc_url($qr_code_url); ?>" alt="<?php esc_attr_e('微信支付二维码', 'tao-payment'); ?>" />  
    <p><?php esc_html_e('支付完成后，页面将自动刷新。', 'tao-payment'); ?></p>  
</div>  

<script>  
    // 轮询支付状态  
    jQuery(document).ready(function ($) {  
        const pollInterval = setInterval(function () {  
            $.ajax({  
                url: '<?php echo esc_url(wc_get_rest_url(null, 'tao-payment/v1/wechatpay-status/' . $order_id)); ?>',  
                method: 'GET',  
                success: function (response) {  
                    if (response.paid) {  
                        clearInterval(pollInterval);  
                        window.location.href = '<?php echo esc_url($order->get_checkout_order_received_url()); ?>';  
                    }  
                }  
            });  
        }, 5000);  
    });  
</script>  -e 


==== ./templates/emails/customer-payment-failed.php ====
<?php
if (!defined('ABSPATH')) exit;

/**
 * 支付失败邮件模板
 */
echo esc_html__('尊敬的客户：', 'tao-payment') . "\n\n";
echo esc_html__('您的订单 #%s 支付未成功，请检查支付方式或联系客服。', 'tao-payment') . "\n";
echo esc_html__('订单详情：', 'tao-payment') . "\n";
echo esc_url($order->get_view_order_url()) . "\n\n";
echo esc_html__('感谢您的支持！', 'tao-payment');-e 


==== ./assets/css/admin.css ====
/* ========================  
   Tao Payment 后台样式  
   Version: 1.1.0  
   ======================== */

/* ------------------------  
   后台配置页通用样式  
   ------------------------ */  
   .tao-payment-settings {  
    max-width: 800px;  
    margin: 20px auto;  
    padding: 20px;  
    background: #fff;  
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);  
}  

.tao-payment-settings h2 {  
    color: #2271b1;  
    border-bottom: 2px solid #2271b1;  
    padding-bottom: 0.5em;  
    margin-bottom: 1.5em;  
}  

.tao-payment-settings .form-table th {  
    width: 250px;  
    padding: 20px 10px 20px 0;  
}  

.tao-payment-settings .form-table td {  
    padding: 15px 10px;  
}  

/* ------------------------  
   证书上传区域  
   ------------------------ */  
.tao-payment-cert-upload {  
    margin: 15px 0;  
    padding: 15px;  
    border: 1px solid #ddd;  
    background: #f9f9f9;  
}  

.tao-payment-cert-upload input[type="file"] {  
    margin: 5px 0;  
    padding: 5px;  
    border: 1px solid #ddd;  
    border-radius: 3px;  
    display: block;  
}  

.tao-payment-cert-upload .description {  
    font-size: 0.9em;  
    color: #666;  
    margin-top: 5px;  
}  

/* ------------------------  
   错误提示  
   ------------------------ */  
.tao-payment-error {  
    color: #dc3232;  
    padding: 10px;  
    border-left: 4px solid #dc3232;  
    background: #fff;  
}  

.tao-payment-alert {  
    padding: 10
-e 


==== ./assets/css/frontend.css ====
/* 支付表单容器 */
.tao-alipay-payment-form, .tao-wechatpay-qrcode {  
    max-width: 600px;  
    margin: 20px auto;  
    padding: 20px;  
    background: #fff;  
    border: 1px solid #ddd;  
    border-radius: 8px;  
    text-align: center;  
}  

/* 支付二维码图片 */  
.tao-wechatpay-qrcode img {  
    max-width: 300px;  
    height: auto;  
    margin: 20px 0;  
    border: 1px solid #eee;  
    padding: 10px;  
}  

/* 加载动画 */  
.loading-indicator .spinner {  
    width: 40px;  
    height: 40px;  
    margin: 20px auto;  
    border: 4px solid #f3f3f3;  
    border-top: 4px solid #3498db;  
    border-radius: 50%;  
    animation: tao-spin 1s linear infinite;  
}  

@keyframes tao-spin {  
    0% { transform: rotate(0deg); }  
    100% { transform: rotate(360deg); }  
}  

/* 错误提示 */  
.tao-payment-error {  
    color: #dc3545;  
    padding: 15px;  
    background: #f8d7da;  
    border: 1px solid #f5c6cb;  
    border-radius: 4px;  
    margin: 20px 0;  
}  

.tao-payment-error a {  
    display: inline-block;  
    margin-top: 10px;  
    color: #721c24;  
    text-decoration: underline;  
}  

/* 重试按钮 */  
.tao-retry-button {  
    background: #007bff;  
    color: #fff;  
    border: none;  
    padding: 8px 16px;  
    border-radius: 4px;  
    cursor: pointer;  
    margin: 10px 0;  
}  

.tao-retry-button:hover {  
    background: #0056b3;  
}  

/* 移动端适配 */  
@media (max-width: 768px) {  
    .tao-alipay-payment-form, .tao-wechatpay-qrcode {  
        margin: 10px;  
        padding: 10px;  
    }  
}  -e 


==== ./assets/js/frontend.js ====
( function( $ ) {
    'use strict';

    // 支付宝表单自动提交逻辑
    function handleAlipayForm() {
        try {
            const $form = $( '#alipay-submit-form' );
            if ( $form.length > 0 ) {
                $form.submit();
            } else {
                console.error( '支付宝表单未找到，正在重新加载...' );
                window.location.reload();
            }
        } catch ( e ) {
            console.error( '支付宝表单提交失败:', e );
            alert( '支付跳转失败，请手动刷新页面！' );
        }
    }

    // 微信支付状态轮询逻辑
    function handleWechatPaymentStatus() {
        const $statusContainer = $( '.tao-payment-status' );
        if ( $statusContainer.length === 0 ) return;

        const orderId = $statusContainer.data( 'order-id' );
        const orderKey = $statusContainer.data( 'order-key' );
        const MAX_RETRIES = 10;
        let retryCount = 0;
        let pollingTimer = null;

        function checkStatus() {
            if ( retryCount >= MAX_RETRIES ) {
                $( '.tao-retry-button' ).show();
                return;
            }

            $.ajax( {
                url: wc_checkout_params.ajax_url,
                method: 'POST',
                data: {
                    action: 'tao_check_wechatpay_status',
                    order_id: orderId,
                    order_key: orderKey
                },
                dataType: 'json'
            } )
                .done( function( response ) {
                    if ( response.success && response.data.status === 'completed' ) {
                        window.location.href = response.data.redirect;
                    } else {
                        retryCount++;
                        pollingTimer = setTimeout( checkStatus, 5000 );
                    }
                } )
                .fail( function( jqXHR, textStatus ) {
                    console.error( '支付状态请求失败:', textStatus );
                    $( '.tao-retry-button' ).show();
                } );
        }

        // 启动轮询
        checkStatus();

        // 手动重试绑定
        $( document ).on( 'click', '.tao-retry-button', function() {
            retryCount = 0;
            $( this ).hide();
            if ( pollingTimer ) clearTimeout( pollingTimer );
            checkStatus();
        } );
    }

    // 全局加载动画控制
    function initLoadingIndicator() {
        $( document ).ajaxStart( function() {
            $( '.loading-indicator' ).show();
        } ).ajaxStop( function() {
            $( '.loading-indicator' ).hide();
        } );
    }

    // 初始化
    $( document ).ready( function() {
        handleAlipayForm();
        handleWechatPaymentStatus();
        initLoadingIndicator();
    } );

} )( jQuery );-e 


==== ./assets/js/libs/x509.js ====
// 依赖库：asn1js@5.0.6 和 pkijs@3.0.5 （需通过 npm 安装后打包为 x509.js）
// 文件内容为编译后的浏览器兼容版本（UMD 格式）
// 注：以下为简化版实现，完整代码需从官方仓库构建

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.X509 = {}));
  }(this, (function (exports) {
    'use strict';
  
    class X509 {
      constructor() {
        this.cert = null;
      }
  
      readCertPEM(pem) {
        const certBody = pem.replace(/-----BEGIN CERTIFICATE-----/g, '')
          .replace(/-----END CERTIFICATE-----/g, '')
          .replace(/\s+/g, '');
        const certBuffer = Uint8Array.from(atob(certBody), c => c.charCodeAt(0)).buffer;
        const asn1 = new asn1js.fromBER(certBuffer);
        this.cert = new pkijs.Certificate({ schema: asn1.result });
      }
  
      getNotAfter() {
        if (!this.cert) throw new Error('未加载证书');
        return this.cert.notAfter.value.toISOString().split('T')[0];
      }
    }
  
    exports.X509 = X509;
  }));-e 


==== ./assets/js/admin.js ====
( function( $ ) {
    'use strict';

    // 校验支付域名格式（HTTPS）
    function validatePaymentDomain() {
        $( 'input[name="payment_domain"]' ).on( 'blur', function() {
            const domain = $( this ).val().trim();
            const pattern = /^https:\/\/[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/;
            if ( domain && !pattern.test( domain ) ) {
                alert( '支付域名必须为 HTTPS 格式，例如：https://pay.example.com' );
                $( this ).addClass( 'tao-input-error' );
            } else {
                $( this ).removeClass( 'tao-input-error' );
            }
        } );
    }

    // 证书有效期实时检测
    function initCertExpiryCheck() {
        $( '.tao-cert-upload' ).on( 'change', function() {
            const $input = $( this );
            const file = $input.prop( 'files' )[0];
            if ( !file ) return;

            const reader = new FileReader();
            reader.onload = function( e ) {
                try {
                    const certContent = e.target.result;
                    const certInfo = new X509();
                    certInfo.readCertPEM( certContent );
                    const expiryDate = certInfo.getNotAfter();
                    $( '#tao-cert-expiry' ).text( `证书有效期至：${expiryDate}` );
                } catch ( e ) {
                    alert( '证书解析失败，请确认文件格式正确！' );
                    $input.val( '' );
                }
            };
            reader.readAsText( file );
        } );
    }

    // 全局配置切换联动
    function handleGlobalConfigToggle() {
        $( '#woocommerce_wechatpay_use_global_config, #woocommerce_alipay_use_global_config' ).on( 'change', function() {
            const isGlobal = $( this ).is( ':checked' );
            const $formTable = $( this ).closest( 'table' ).next( 'table' );
            $formTable.find( 'input, textarea, select' ).prop( 'disabled', isGlobal );
        } ).trigger( 'change' );
    }

    // 初始化
    $( document ).ready( function() {
        validatePaymentDomain();
        initCertExpiryCheck();
        handleGlobalConfigToggle();

        // AJAX 测试连接（示例）
        $( '.tao-test-connection' ).on( 'click', function( e ) {
            e.preventDefault();
            const $button = $( this );
            $button.prop( 'disabled', true ).text( '测试中...' );

            $.post( ajaxurl, {
                action: 'tao_test_payment_connection',
                gateway: $button.data( 'gateway' ),
                _wpnonce: tao_admin_params.nonce
            } )
                .done( function( response ) {
                    if ( response.success ) {
                        alert( '连接测试成功！' );
                    } else {
                        alert( '连接失败：' + ( response.data.message || '未知错误' ) );
                    }
                } )
                .fail( function() {
                    alert( '请求发送失败，请检查网络！' );
                } )
                .always( function() {
                    $button.prop( 'disabled', false ).text( '测试连接' );
                } );
        } );
    } );

} )( jQuery );-e 


