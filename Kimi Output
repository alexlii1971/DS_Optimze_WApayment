==== ./tests/unit-tests/unit-tests/class-payment-gateway-test.php ====



==== ./tests/unit-tests/integration-tests/network-config-test.php ====



==== ./includes/classes/class-payment-gateway.php ====
<?php
namespace WooMultiSitePayment\Includes\Classes;

abstract class PaymentGateway {
    protected $id;
    protected $title;
    protected $description;
    protected $supports;
    protected $method_title;
    protected $method_description;
    protected $settings;
    protected $logs;

    public function __construct() {
        $this->initialize();
    }

    protected function initialize() {
        $this->id = $this->get_id();
        $this->title = $this->get_title();
        $this->description = $this->get_description();
        $this->supports = $this->get_supports();
        $this->method_title = $this->get_method_title();
        $this->method_description = $this->get_method_description();
        $this->settings = $this->get_settings();
        $this->logs = array();
        $this->init_logs();
    }

    abstract public function get_id();
    abstract public function get_title();
    abstract public function get_description();
    abstract public function get_supports();
    abstract public function get_method_title();
    abstract public function get_method_description();
    abstract public function get_settings();
    abstract public function process_payment($order_id);
    abstract public function handle_callback($callback_data);

    public function add_log($message, $level = 'info') {
        $this->logs[] = $this->format_log_message($message, $level);
        $this->save_log($this->logs);
    }

    protected function format_log_message($message, $level) {
        return sprintf('[%s] [%s] %s', date('Y-m-d H:i:s'), strtoupper($level), $message);
    }

    protected function save_log($logs) {
        // Implement log saving logic with level support
        // Example: Use a logger or database
    }

    protected function init_logs() {
        // Load logs from database
        $this->logs = array(); // Placeholder for actual implementation
    }

    public function get_logs() {
        return $this->logs;
    }

    public function get_payment_form($order_id) {
        $order = wc_get_order($order_id);
        // Implement payment form logic here
        return 'Payment form not implemented';
    }

    public function after_payment_processing($order_id) {
        // Implement after payment processing logic here
    }

    public function cancel_transaction($order_id) {
        // Implement transaction cancellation logic here
    }

    public function get_payment_status($order_id) {
        $order = wc_get_order($order_id);
        return $order->get_status();
    }

    public function handle_webhook($webhook_data) {
        // Implement webhook handling logic here
    }

    public function get_icon() {
        // Implement icon retrieval logic here
        return '<img src="#" alt="' . esc_attr($this->method_title) . '" />';
    }

    public function get_form_fields() {
        // Implement form fields retrieval logic here
        return array();
    }

    public function validate_fields($posted_data) {
        // Implement field validation logic here
        return true;
    }

    public function save_admin_options() {
        // Implement saving admin options logic here
    }
}


==== ./includes/classes/class-alipay.php ====
<?php
namespace WooMultiSitePayment\Includes\Classes;

use WooMultiSitePayment\Includes\Classes\PaymentGateway;
use WooMultiSitePayment\PaymentGateway\Alipay\AlipaySDK;

class Alipay_Gateway extends PaymentGateway {
    public function get_id() {
        return 'alipay';
    }

    public function get_title() {
        return __('AliPay', 'woo-multi-site-payment');
    }

    public function get_description() {
        return __('Pay with AliPay.', 'woo-multi-site-payment');
    }

    public function get_supports() {
        return array(
            'products',
            'refunds'
        );
    }

    public function get_method_title() {
        return __('AliPay', 'woo-multi-site-payment');
    }

    public function get_method_description() {
        return __('Pay using AliPay.', 'woo-multi-site-payment');
    }

    public function get_settings() {
        return array(
            'app_id' => array(
                'title'     => __('App ID', 'woo-multi-site-payment'),
                'type'      => 'text',
                'description' => __('Enter your AliPay App ID.', 'woo-multi-site-payment'),
                'default'   => '',
                'desc_tip'  => true
            ),
            'private_key' => array(
                'title'     => __('Private Key', 'woo-multi-site-payment'),
                'type'      => 'textarea',
                'description' => __('Enter your AliPay private key.', 'woo-multi-site-payment'),
                'default'   => '',
                'desc_tip'  => true
            ),
            'public_key' => array(
                'title'     => __('AliPay Public Key', 'woo-multi-site-payment'),
                'type'      => 'textarea',
                'description' => __('Enter your AliPay public key.', 'woo-multi-site-payment'),
                'default'   => '',
                'desc_tip'  => true,
                'sanitize_callback' => array($this, 'validate_alipay_public_key')
            )
        );
    }

    public function process_payment($order_id) {
        $order = wc_get_order($order_id);

        // Set order as on-hold (we're awaiting the payment)
        $order->update_status('on-hold', __('Awaiting AliPay payment', 'woo-multi-site-payment'));

        // Reduce stock levels
        $order->reduce_order_stock();

        // Remove cart
        WC()->cart->empty_cart();

        // Generate AliPay payment request
        $sdk = new AlipaySDK();
        $payment_data = $sdk->generatePaymentRequest($order_id, $order->get_total(), $order->get_currency());

        // Return payment form or redirect data
        return array(
            'result'   => 'success',
            'redirect' => $payment_data['redirect_url']
        );
    }

    public function handle_callback($callback_data) {
        // Validate AliPay signature
        $verified = $this->verify_signature($callback_data);

        if ($verified) {
            // Process payment completion
            $this->process_payment_completion($callback_data);
        } else {
            $this->handle_signature_failure($callback_data);
        }
    }

    private function verify_signature($data) {
        $public_key = $this->get_alipay_public_key();
        if (empty($public_key)) {
            $this->add_log('AliPay public key not configured', 'error');
            return false;
        }

        $public_key = "-----BEGIN PUBLIC KEY-----\n" . wordwrap($public_key, 64, "\n", true) . "\n-----END PUBLIC KEY-----";

        $pub_key = openssl_get_publickey($public_key);

        if (!openssl_verify($data['data'], $data['sign'], $pub_key, OPENSSL_ALGO_SHA256)) {
            openssl_free_key($pub_key);
            return false;
        }

        openssl_free_key($pub_key);
        return true;
    }

    private function process_payment_completion($callback_data) {
        $order_id = $this->retrieve_order_id_from_callback($callback_data);
        $order = wc_get_order($order_id);

        if ($order && $order->has_status('pending')) {
            $order->payment_complete();
            $this->add_log('Payment completed for order: ' . $order_id, 'info');
        } else {
            $this->add_log('Order status already updated for order: ' . $order_id, 'warning');
        }
    }

    private function handle_signature_failure($callback_data) {
        $this->add_log('AliPay payment validation failed for callback data: ' . json_encode($callback_data), 'error');
    }

    private function retrieve_order_id_from_callback($callback_data) {
        return isset($callback_data['out_trade_no']) ? $callback_data['out_trade_no'] : '';
    }

    public function get_payment_form($order_id) {
        // Generate payment form for AliPay
        $order = wc_get_order($order_id);
        $payment_qr_code = $this->generate_alipay_payment_qr_code($order);

        return '<div class="alipay-payment-qr-code">' .
               '<img src="' . esc_url($payment_qr_code) . '" alt="AliPay QR Code" />' .
               '<pre>' . esc_html__('Scan the QR code to make your payment.', 'woo-multi-site-payment') . '</pre></div>';
    }

    private function generate_alipay_payment_qr_code($order) {
        $sdk = new AlipaySDK();
        return $sdk->generateQrCode($order->get_id(), $order->get_total(), $order->get_currency());
    }

    public function get_icon() {
        return '<img src="' . esc_url(WOO_MULTI_SITE_PAYMENT_PLUGIN_URL . 'assets/img/alipay.png') . '" alt="' . esc_attr($this->method_title) . '" />';
    }

    public function validate_alipay_public_key($value) {
        if (!preg_match('/-----BEGIN PUBLIC KEY-----[\s\S]+-----END PUBLIC KEY-----/', $value)) {
            return '';
        }
        return sanitize_textarea_field($value);
    }
}


==== ./includes/classes/class-wechat-pay.php ====
<?php
namespace WooMultiSitePayment\Includes\Classes;

use WooMultiSitePayment\Includes\Classes\PaymentGateway;
use WooMultiSitePayment\PaymentGateway\Wechat\WechatSDK;

class WechatPay_Gateway extends PaymentGateway {
    public function get_id() {
        return 'wechat_pay';
    }

    public function get_title() {
        return __('WeChat Pay', 'woo-multi-site-payment');
    }

    public function get_description() {
        return __('Pay with WeChat.', 'woo-multi-site-payment');
    }

    public function get_supports() {
        return array(
            'products',
            'refunds'
        );
    }

    public function get_method_title() {
        return __('WeChat Pay', 'woo-multi-site-payment');
    }

    public function get_method_description() {
        return __('Pay using WeChat Pay.', 'woo-multi-site-payment');
    }

    public function get_settings() {
        return array(
            'mch_id' => array(
                'title'     => __('Merchant ID', 'woo-multi-site-payment'),
                'type'      => 'text',
                'description' => __('Enter your WeChat Merchant ID.', 'woo-multi-site-payment'),
                'default'   => '',
                'desc_tip'  => true
            ),
            'api_key' => array(
                'title'     => __('API Key', 'woo-multi-site-payment'),
                'type'      => 'text',
                'description' => __('Enter your WeChat API Key.', 'woo-multi-site-payment'),
                'default'   => '',
                'desc_tip'  => true
            ),
            'cert_path' => array(
                'title'     => __('Certificate Path', 'woo-multi-site-payment'),
                'type'      => 'text',
                'description' => __('Path to your WeChat Payment API certificate.', 'woo-multi-site-payment'),
                'default'   => '',
                'desc_tip'  => true,
                'sanitize_callback' => array($this, 'validate_certificate_path')
            )
        );
    }

    public function process_payment($order_id) {
        $order = wc_get_order($order_id);

        // Set order as on-hold (we're awaiting the payment)
        $order->update_status('on-hold', __('Awaiting WeChat Pay payment', 'woo-multi-site-payment'));

        // Reduce stock levels
        $order->reduce_order_stock();

        // Remove cart
        WC()->cart->empty_cart();

        // Generate WeChat Pay payment request
        $sdk = new WechatSDK();
        $payment_data = $sdk->generatePaymentRequest($order_id, $order->get_total(), $order->get_currency());

        // Return payment form or redirect data
        return array(
            'result'   => 'success',
            'redirect' => $payment_data['redirect_url']
        );
    }

    public function handle_callback($callback_data) {
        // Validate WeChat Pay signature
        $signature_valid = $this->validate_wechat_payment_signature($callback_data);

        if ($signature_valid) {
            // Process payment completion
            $this->process_payment_completion($callback_data);
        } else {
            $this->handle_signature_failure($callback_data);
        }
    }

    private function validate_wechat_payment_signature($callback_data) {
        $config = get_site_option('woo_multi_site_payment_network_config');
        $api_key = $config['global_wechat_api_key'] ?? '';

        if (empty($api_key)) {
            $this->add_log('WeChat API Key not configured', 'error');
            return false;
        }

        $sign = $callback_data['sign'] ?? '';
        unset($callback_data['sign']);

        $sorted_data = $this->sort_wechat_params($callback_data);
        $string = $this->array_to_query_string($sorted_data);
        $computed_sign = strtoupper(hash_hmac('sha256', $string, $api_key));

        return hash_equals($sign, $computed_sign);
    }

    private function sort_wechat_params($params) {
        ksort($params);
        return $params;
    }

    private function array_to_query_string($array) {
        $query_string = '';
        foreach ($array as $key => $value) {
            if ($value !== '') {
                $query_string .= "$key=$value&";
            }
        }
        return rtrim($query_string, '&');
    }

    private function process_payment_completion($callback_data) {
        $order_id = $this->retrieve_order_id_from_callback($callback_data);
        $order = wc_get_order($order_id);

        if ($order && $order->has_status('pending')) {
            $order->payment_complete();
            $this->add_log('Payment completed for order: ' . $order_id, 'info');
        } else {
            $this->add_log('Order status already updated for order: ' . $order_id, 'warning');
        }
    }

    private function handle_signature_failure($callback_data) {
        $this->add_log('WeChat Pay payment validation failed for callback data: ' . json_encode($callback_data), 'error');
    }

    private function retrieve_order_id_from_callback($callback_data) {
        return isset($callback_data['out_trade_no']) ? $callback_data['out_trade_no'] : '';
    }

    public function get_payment_form($order_id) {
        // Generate payment form for WeChat Pay
        $order = wc_get_order($order_id);
        $payment_qr_code = $this->generate_wechat_payment_qr_code($order);

        return '<div class="wechat-payment-qr-code">' .
               '<img src="' . esc_url($payment_qr_code) . '" alt="WeChat Pay QR Code" />' .
               '<pre>' . esc_html__('Scan the QR code to make your payment.', 'woo-multi-site-payment') . '</pre></div>';
    }

    private function generate_wechat_payment_qr_code($order) {
        $sdk = new WechatSDK();
        return $sdk->generateQrCode($order->get_id(), $order->get_total(), $order->get_currency());
    }

    public function get_icon() {
        return '<img src="' . esc_url(WOO_MULTI_SITE_PAYMENT_PLUGIN_URL . 'assets/img/wechat-pay.png') . '" alt="' . esc_attr($this->method_title) . '" />';
    }

    public function validate_certificate_path($value) {
        if (!file_exists($value) || !is_readable($value)) {
            return '';
        }
        return sanitize_text_field($value);
    }
}


==== ./includes/payment-gateway/alipay/alipay-sdk.php ====



==== ./includes/payment-gateway/alipay/alipay-callback.php ====
<?php
namespace WooMultiSitePayment\PaymentGateway\Alipay;

use WooMultiSitePayment\Includes\Functions\Utils;

class AlipayCallback {
    public function __construct() {
        add_action('woocommerce_api_woo_multi_site_payment_alipay_callback', array($this, 'handle_callback'));
    }

    public function handle_callback() {
        $callback_data = file_get_contents('php://input');
        $callback_data = json_decode($callback_data, true);

        if (!$callback_data) {
            Utils::log_event('Invalid callback data received.', 'error');
            wp_die('Invalid callback data');
        }

        $config = get_site_option('woo_multi_site_payment_network_config');
        $alipay_public_key = $config['global_alipay_public_key'] ?? '';

        if (empty($alipay_public_key)) {
            Utils::log_event('AliPay public key not configured.', 'error');
            wp_die('Public key not configured');
        }

        $verified = $this->verify_signature($callback_data, $alipay_public_key);

        if (!$verified) {
            Utils::log_event('Invalid signature in callback data.', 'error');
            wp_die('Invalid signature');
        }

        $order_id = $callback_data['out_trade_no'] ?? '';
        $order = wc_get_order($order_id);

        if (!$order) {
            Utils::log_event('Order not found for callback: ' . $order_id, 'error');
            wp_die('Order not found');
        }

        $order->payment_complete();
        Utils::log_event('Payment completed for order: ' . $order_id);

        wp_die('Success');
    }

    private function verify_signature($data, $public_key) {
        $public_key = "-----BEGIN PUBLIC KEY-----\n" . wordwrap($public_key, 64, "\n", true) . "\n-----END PUBLIC KEY-----";

        $pub_key = openssl_get_publickey($public_key);

        if (!openssl_verify($data['data'], $data['sign'], $pub_key, OPENSSL_ALGO_SHA256)) {
            openssl_free_key($pub_key);
            return false;
        }

        openssl_free_key($pub_key);
        return true;
    }
}

new AlipayCallback();


==== ./includes/payment-gateway/wechat/wechat-sdk.php ====



==== ./includes/payment-gateway/wechat/wechat-callback.php ====
<?php
namespace WooMultiSitePayment\PaymentGateway\Wechat;

use WooMultiSitePayment\Includes\Functions\Utils;

class WechatCallback {
    public function __construct() {
        add_action('woocommerce_api_woo_multi_site_payment_wechat_callback', array($this, 'handle_callback'));
    }

    public function handle_callback() {
        // Log the raw callback data
        Utils::log_event('WeChat Callback Received: ' . var_export($_SERVER, true), 'debug');
        Utils::log_event('WeChat Callback Data: ' . file_get_contents('php://input'), 'debug');

        // Check if the request is from a trusted source
        $referer = wp_get_referer();
        $raw_referer = wp_get_raw_referer();
        if (!empty($referer) && !Utils::is_valid_url($referer)) {
            Utils::log_event('Invalid referer URL: ' . esc_url($referer), 'error');
            wp_die('Invalid referer URL');
        }

        if (!empty($raw_referer) && !Utils::is_valid_url($raw_referer)) {
            Utils::log_event('Invalid raw referer URL: ' . esc_url($raw_referer), 'error');
            wp_die('Invalid raw referer URL');
        }

        // Retrieve callback data
        $callback_data = file_get_contents('php://input');
        $callback_data = json_decode($callback_data, true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            Utils::log_event('Invalid JSON data received', 'error');
            wp_die('Invalid JSON data');
        }

        if (empty($callback_data)) {
            Utils::log_event('Empty callback data received', 'error');
            wp_die('Empty callback data');
        }

        // Validate WeChat callback signature
        if (!$this->validate_wechat_signature($callback_data)) {
            Utils::log_event('Invalid WeChat callback signature', 'error');
            wp_die('Invalid signature');
        }

        // Process payment completion
        $order_id = $callback_data['out_trade_no'] ?? '';
        if (empty($order_id)) {
            Utils::log_event('Missing order ID in callback data', 'error');
            wp_die('Missing order ID');
        }

        $order = wc_get_order($order_id);
        if (!$order) {
            Utils::log_event('Order not found for ID: ' . $order_id, 'error');
            wp_die('Order not found');
        }

        // Update order status
        if ($order->has_status('pending')) {
            $order->payment_complete();
            Utils::log_event('Payment completed for order: ' . $order_id, 'info');
            wp_die('Success');
        } else {
            Utils::log_event('Order status already updated for order: ' . $order_id, 'warning');
            wp_die('Order status already updated');
        }
    }

    private function validate_wechat_signature($callback_data) {
        $config = get_site_option('woo_multi_site_payment_network_config');
        $api_key = $config['global_wechat_api_key'] ?? '';

        if (empty($api_key)) {
            Utils::log_event('WeChat API Key not configured', 'error');
            return false;
        }

        $sign = $callback_data['sign'] ?? '';
        unset($callback_data['sign']);

        $sorted_data = $this->sort_wechat_params($callback_data);
        $string = $this->array_to_query_string($sorted_data);
        $computed_sign = strtoupper(hash_hmac('sha256', $string, $api_key));

        return hash_equals($sign, $computed_sign);
    }

    private function sort_wechat_params($params) {
        ksort($params);
        return $params;
    }

    private function array_to_query_string($array) {
        $query_string = '';
        foreach ($array as $key => $value) {
            if ($value !== '') {
                $query_string .= "$key=$value&";
            }
        }
        return rtrim($query_string, '&');
    }
}

new WechatCallback();


==== ./includes/functions/security-functions.php ====
<?php
namespace WooMultiSitePayment\Includes\Functions;

class SecurityUtils {
    public static function generate_security_token($user_id) {
        // Implement token generation logic here
        return hash_hmac('sha256', strval($user_id) . time(), 'secret_key');
    }

    public static function validate_request($request) {
        // Implement request validation logic here
        return wp_verify_nonce($request['nonce'], 'woo-multi-site-payment');
    }
}


==== ./includes/functions/utils-functions.php ====
<?php
namespace WooMultiSitePayment\Includes\Functions;

class Utils {
    public static function encrypt_data($data, $encryption_key) {
        try {
            $method = 'AES-256-GCM';
            $iv = random_bytes(openssl_cipher_iv_length($method));
            $tag_length = 16;
            $tag = '';

            $encrypted_data = openssl_encrypt(
                $data,
                $method,
                $encryption_key,
                OPENSSL_RAW_DATA,
                $iv,
                $tag,
                '',
                $tag_length
            );

            if ($encrypted_data === false) {
                throw new Exception('Encryption failed: ' . openssl_error_string());
            }

            return [
                'iv' => bin2hex($iv),
                'tag' => bin2hex($tag),
                'ciphertext' => bin2hex($encrypted_data)
            ];
        } catch (Exception $e) {
            error_log('[Woo Multi-Site Payment] Encryption error: ' . $e->getMessage());
            return false;
        }
    }

    public static function decrypt_data($encrypted_data, $encryption_key) {
        try {
            $method = 'AES-256-GCM';
            $iv = hex2bin($encrypted_data['iv']);
            $tag = hex2bin($encrypted_data['tag']);
            $ciphertext = hex2bin($encrypted_data['ciphertext']);

            $decrypted_data = openssl_decrypt(
                $ciphertext,
                $method,
                $encryption_key,
                OPENSSL_RAW_DATA,
                $iv,
                $tag
            );

            if ($decrypted_data === false) {
                throw new Exception('Decryption failed: ' . openssl_error_string());
            }

            return $decrypted_data;
        } catch (Exception $e) {
            error_log('[Woo Multi-Site Payment] Decryption error: ' . $e->getMessage());
            return false;
        }
    }

    public static function generate_unique_reference($prefix = 'PAY') {
        return $prefix . '-' . uniqid() . '-' . time();
    }

    public static function log_event($message, $level = 'info') {
        if (class_exists('WC_Logger')) {
            $logger = wc_get_logger();
            $logger->log(strtoupper($level), $message, array('source' => 'woo-multi-site-payment'));
        } else {
            error_log($message);
        }
    }

    public static function get_current_site_id() {
        return get_current_blog_id();
    }

    public static function is_valid_email($email) {
        return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
    }

    public static function is_valid_url($url) {
        return filter_var($url, FILTER_VALIDATE_URL) !== false;
    }

    public static function cache_data($key, $data, $expiration = 0) {
        return wp_cache_set($key, $data, 'woo-multi-site-payment', $expiration);
    }

    public static function get_cached_data($key) {
        return wp_cache_get($key, 'woo-multi-site-payment');
    }
}


==== ./includes/functions/config-functions.php ====
<?php
namespace WooMultiSitePayment\Includes\Functions;

class ConfigUtils {
    public static function load_config($file_path) {
        // Implement config loading logic here
        return include $file_path;
    }

    public static function get_dynamic_config($key) {
        // Implement dynamic config retrieval logic here
        return apply_filters('woo_multi_site_payment_dynamic_config', array(), $key);
    }
}


==== ./admin/network/network-utils.php ====



==== ./admin/network/network-logs.php ====



==== ./admin/network/network-config.php ====
<?php
namespace WooMultiSitePayment\Admin\Network;

use WooMultiSitePayment\Includes\Functions\Utils;

class NetworkConfig {
    public function __construct() {
        add_action('network_admin_menu', array($this, 'add_network_menu'));
        add_action('network_admin_init', array($this, 'register_settings'));
    }

    public function add_network_menu() {
        add_submenu_page(
            'plugins.php',
            esc_html__('Multi-Site Payment Settings', 'woo-multi-site-payment'),
            esc_html__('Multi-Site Payment', 'woo-multi-site-payment'),
            'manage_network',
            'woo-multi-site-payment-network-settings',
            array($this, 'render_network_settings_page')
        );
    }

    public function register_settings() {
        register_setting(
            'woo_multi_site_payment_network_settings',
            'woo_multi_site_payment_network_config',
            array($this, 'sanitize_network_config')
        );
        add_settings_section(
            'woo_multi_site_payment_section',
            esc_html__('Global Payment Configuration', 'woo-multi-site-payment'),
            array($this, 'section_callback'),
            'woo_multi_site_payment_network_settings'
        );
        add_settings_field(
            'global_wechat_mch_id',
            esc_html__('WeChat Merchant ID', 'woo-multi-site-payment'),
            array($this, 'wechat_mch_id_callback'),
            'woo_multi_site_payment_network_settings',
            'woo_multi_site_payment_section'
        );
        add_settings_field(
            'global_wechat_api_key',
            esc_html__('WeChat API Key', 'woo-multi-site-payment'),
            array($this, 'wechat_api_key_callback'),
            'woo_multi_site_payment_network_settings',
            'woo_multi_site_payment_section'
        );
        add_settings_field(
            'global_alipay_app_id',
            esc_html__('AliPay App ID', 'woo-multi-site-payment'),
            array($this, 'alipay_app_id_callback'),
            'woo_multi_site_payment_network_settings',
            'woo_multi_site_payment_section'
        );
        add_settings_field(
            'global_alipay_private_key',
            esc_html__('AliPay Private Key', 'woo-multi-site-payment'),
            array($this, 'alipay_private_key_callback'),
            'woo_multi_site_payment_network_settings',
            'woo_multi_site_payment_section'
        );
    }

    public function sanitize_network_config($input) {
        // Validate and sanitize WeChat Merchant ID
        $input['global_wechat_mch_id'] = sanitize_text_field($input['global_wechat_mch_id'] ?? '');

        // Validate and sanitize WeChat API Key
        $input['global_wechat_api_key'] = sanitize_text_field($input['global_wechat_api_key'] ?? '');

        // Validate and sanitize AliPay App ID
        $input['global_alipay_app_id'] = sanitize_text_field($input['global_alipay_app_id'] ?? '');

        // Validate and sanitize AliPay Private Key
        $input['global_alipay_private_key'] = sanitize_textarea_field($input['global_alipay_private_key'] ?? '');

        return $input;
    }

    public function section_callback() {
        echo '<p>' . esc_html__('Configure global payment settings for all sites in the network.', 'woo-multi-site-payment') . '</p>';
    }

    public function wechat_mch_id_callback() {
        $value = get_site_option('woo_multi_site_payment_network_config')['global_wechat_mch_id'] ?? '';
        echo '<input type="text" name="woo_multi_site_payment_network_config[global_wechat_mch_id]" value="' . esc_attr($value) . '" placeholder="Enter WeChat Merchant ID" />';
    }

    public function wechat_api_key_callback() {
        $value = get_site_option('woo_multi_site_payment_network_config')['global_wechat_api_key'] ?? '';
        echo '<input type="text" name="woo_multi_site_payment_network_config[global_wechat_api_key]" value="' . esc_attr($value) . '" placeholder="Enter WeChat API Key" />';
    }

    public function alipay_app_id_callback() {
        $value = get_site_option('woo_multi_site_payment_network_config')['global_alipay_app_id'] ?? '';
        echo '<input type="text" name="woo_multi_site_payment_network_config[global_alipay_app_id]" value="' . esc_attr($value) . '" placeholder="Enter AliPay App ID" />';
    }

    public function alipay_private_key_callback() {
        $value = get_site_option('woo_multi_site_payment_network_config')['global_alipay_private_key'] ?? '';
        echo '<textarea name="woo_multi_site_payment_network_config[global_alipay_private_key]" rows="4" cols="50" placeholder="Enter AliPay Private Key">' . esc_textarea($value) . '</textarea>';
    }

    public function render_network_settings_page() {
        echo '<div class="wrap">';
        echo '<h1>' . esc_html__('Multi-Site Payment Settings', 'woo-multi-site-payment') . '</h1>';
        echo '<form method="post" action="options.php">';
        settings_fields('woo_multi_site_payment_network_settings');
        do_settings_sections('woo_multi_site_payment_network_settings');
        submit_button();
        echo '</form>';
        echo '</div>';
    }
}

new NetworkConfig();


==== ./admin/site/site-logs.php ====
<?php
namespace WooMultiSitePayment\Admin\Site;

use WooMultiSitePayment\Includes\Functions\Utils;

class SiteLogs {
    public function __construct() {
        add_action('admin_menu', array($this, 'add_site_logs_menu'));
    }

    public function add_site_logs_menu() {
        add_submenu_page(
            'woo-multi-site-payment-site-settings',
            esc_html__('Site Payment Logs', 'woo-multi-site-payment'),
            esc_html__('Payment Logs', 'woo-multi-site-payment'),
            'manage_options',
            'woo-multi-site-payment-site-logs',
            array($this, 'render_site_logs_page')
        );
    }

    public function render_site_logs_page() {
        echo '<div class="wrap">';
        echo '<h1>' . esc_html__('Site Payment Logs', 'woo-multi-site-payment') . '</h1>';
        // Add log display logic here
        echo '</div>';
    }
}

new SiteLogs();


==== ./admin/site/site-utils.php ====
<?php
namespace WooMultiSitePayment\Admin\Site;

class SiteUtils {
    public static function cleanup_logs() {
        // Add log cleanup logic here
    }

    public static function export_data() {
        // Add data export logic here
    }
}


==== ./admin/site/site-config.php ====
<?php
namespace WooMultiSitePayment\Admin\Site;

use WooMultiSitePayment\Includes\Functions\Utils;

class SiteConfig {
    public function __construct() {
        add_action('admin_menu', array($this, 'add_site_menu'));
        add_action('admin_init', array($this, 'register_settings'));
    }

    public function add_site_menu() {
        add_submenu_page(
            'woocommerce',
            esc_html__('Site Payment Settings', 'woo-multi-site-payment'),
            esc_html__('Site Payment', 'woo-multi-site-payment'),
            'manage_options',
            'woo-multi-site-payment-site-settings',
            array($this, 'render_site_settings_page')
        );
    }

    public function register_settings() {
        register_setting(
            'woo_multi_site_payment_site_settings',
            'woo_multi_site_payment_site_config',
            array($this, 'sanitize_site_config')
        );
        add_settings_section(
            'woo_multi_site_payment_site_section',
            esc_html__('Site Payment Configuration', 'woo-multi-site-payment'),
            array($this, 'section_callback'),
            'woo_multi_site_payment_site_settings'
        );
        add_settings_field(
            'site_wechat_mch_id',
            esc_html__('WeChat Merchant ID', 'woo-multi-site-payment'),
            array($this, 'wechat_mch_id_callback'),
            'woo_multi_site_payment_site_settings',
            'woo_multi_site_payment_site_section'
        );
        add_settings_field(
            'site_wechat_api_key',
            esc_html__('WeChat API Key', 'woo-multi-site-payment'),
            array($this, 'wechat_api_key_callback'),
            'woo_multi_site_payment_site_settings',
            'woo_multi_site_payment_site_section'
        );
        add_settings_field(
            'site_alipay_app_id',
            esc_html__('AliPay App ID', 'woo-multi-site-payment'),
            array($this, 'alipay_app_id_callback'),
            'woo_multi_site_payment_site_settings',
            'woo_multi_site_payment_site_section'
        );
        add_settings_field(
            'site_alipay_private_key',
            esc_html__('AliPay Private Key', 'woo-multi-site-payment'),
            array($this, 'alipay_private_key_callback'),
            'woo_multi_site_payment_site_settings',
            'woo_multi_site_payment_site_section'
        );
    }

    public function sanitize_site_config($input) {
        // Validate and sanitize WeChat Merchant ID
        $input['site_wechat_mch_id'] = sanitize_text_field($input['site_wechat_mch_id'] ?? '');

        // Validate and sanitize WeChat API Key
        $input['site_wechat_api_key'] = sanitize_text_field($input['site_wechat_api_key'] ?? '');

        // Validate and sanitize AliPay App ID
        $input['site_alipay_app_id'] = sanitize_text_field($input['site_alipay_app_id'] ?? '');

        // Validate and sanitize AliPay Private Key
        $input['site_alipay_private_key'] = sanitize_textarea_field($input['site_alipay_private_key'] ?? '');

        return $input;
    }

    public function section_callback() {
        echo '<p>' . esc_html__('Configure payment settings for the current site.', 'woo-multi-site-payment') . '</p>';
    }

    public function wechat_mch_id_callback() {
        $value = get_option('woo_multi_site_payment_site_config')['site_wechat_mch_id'] ?? '';
        echo '<input type="text" name="woo_multi_site_payment_site_config[site_wechat_mch_id]" value="' . esc_attr($value) . '" />';
        echo '<p class="description">' . esc_html__('Enter your WeChat Merchant ID. This is a required field.', 'woo-multi-site-payment') . '</p>';
        echo '<p class="error-message" style="color: #ff4848;"></p>';
    }

    public function wechat_api_key_callback() {
        $value = get_option('woo_multi_site_payment_site_config')['site_wechat_api_key'] ?? '';
        echo '<input type="text" name="woo_multi_site_payment_site_config[site_wechat_api_key]" value="' . esc_attr($value) . '" />';
        echo '<p class="description">' . esc_html__('Enter your WeChat API Key. This is a required field.', 'woo-multi-site-payment') . '</p>';
        echo '<p class="error-message" style="color: #ff4848;"></p>';
    }

    public function alipay_app_id_callback() {
        $value = get_option('woo_multi_site_payment_site_config')['site_alipay_app_id'] ?? '';
        echo '<input type="text" name="woo_multi_site_payment_site_config[site_alipay_app_id]" value="' . esc_attr($value) . '" />';
        echo '<p class="description">' . esc_html__('Enter your AliPay App ID. This is a required field.', 'woo-multi-site-payment') . '</p>';
        echo '<p class="error-message" style="color: #ff4848;"></p>';
    }

    public function alipay_private_key_callback() {
        $value = get_option('woo_multi_site_payment_site_config')['site_alipay_private_key'] ?? '';
        echo '<textarea name="woo_multi_site_payment_site_config[site_alipay_private_key]" rows="4" cols="50">' . esc_textarea($value) . '</textarea>';
        echo '<p class="description">' . esc_html__('Enter your AliPay private key. This is a required field.', 'woo-multi-site-payment') . '</p>';
        echo '<p class="error-message" style="color: #ff4848;"></p>';
    }

    public function render_site_settings_page() {
        echo '<div class="wrap">';
        echo '<h1>' . esc_html__('Site Payment Settings', 'woo-multi-site-payment') . '</h1>';
        echo '<form method="post" action="options.php">';
        settings_fields('woo_multi_site_payment_site_settings');
        do_settings_sections('woo_multi_site_payment_site_settings');
        submit_button();
        echo '</form>';
        echo '</div>';
    }
}

new SiteConfig();


==== ./public/includes/frontend.php ====
<?php
namespace WooMultiSitePayment\Public\Includes;

use WooMultiSitePayment\Includes\Classes\PaymentGateway;
use WooMultiSitePayment\Includes\Functions\Utils;

class Frontend {
    public function __construct() {
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_shortcode('woo-multi-site-payment', array($this, 'render_payment_gateway'));
    }

    public function enqueue_scripts() {
        wp_enqueue_style(
            'woo-multi-site-payment-admin-css',
            plugins_url('assets/css/admin.css', dirname(__FILE__, 3)),
            array(),
            '1.0'
        );
        wp_enqueue_script(
            'woo-multi-site-payment-admin-js',
            plugins_url('assets/js/admin.js', dirname(__FILE__, 3)),
            array('jquery'),
            '1.2',
            true
        );
    }

    public function render_payment_gateway() {
        $payment_gateways = $this->get_enabled_payment_gateways();
        $output = '<div class="payment-gateways">';
        foreach ($payment_gateways as $gateway) {
            $output .= $this->render_payment_gateway_button($gateway);
        }
        $output .= '</div>';
        return $output;
    }

    private function get_enabled_payment_gateways() {
        $gateways = WC()->payment_gateways->get_available_payment_gateways();
        $enabled_gateways = array();
        foreach ($gateways as $gateway) {
            if ($gateway instanceof PaymentGateway) {
                $enabled_gateways[] = $gateway;
            }
        }
        return $enabled_gateways;
    }

    private function render_payment_gateway_button($gateway) {
        ob_start();
        ?>
        <button class="payment-gateway-button" data-gateway="<?php echo esc_attr($gateway->id); ?>">
            <?php echo esc_html($gateway->title); ?>
        </button>
        <?php
        return ob_get_clean();
    }
}


==== ./public/assets/css/admin.css ====
/* Admin styles for WooCommerce Multi-Site Payment Gateway */

/* General styles */
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    line-height: 1.5;
}

/* Form styles */
form {
    margin: 20px 0;
}

fieldset {
    border: 1px solid #ccc;
    padding: 15px;
    margin-bottom: 20px;
}

legend {
    font-size: 1.2em;
    font-weight: bold;
    margin-bottom: 10px;
}

input[type="text"],
input[type="email"],
textarea {
    width: 100%;
    padding: 8px;
    margin: 5px 0;
    border: 1px solid #ddd;
    border-radius: 4px;
}

textarea {
    resize: vertical;
}

select {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    color: #444;
}

/* Button styles */
button,
input[type="submit"] {
    background-color: #0073aa;
    border: none;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 4px;
    color: white;
}

button:hover,
input[type="submit"]:hover {
    background-color: #006799;
}

button.disabled,
input[type="submit"].disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

/* Table styles */
table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

th,
td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background-color: #f2f2f2;
    font-weight: bold;
}

tr:hover {
    background-color: #f5f5f5;
}

/* Error and success messages */
.error-message {
    color: #ff4848;
    background-color: #ffebe8;
    padding: 10px;
    border-radius: 4px;
    margin: 10px 0;
}

.success-message {
    color: #4caf50;
    background-color: #e8f5e9;
    padding: 10px;
    border-radius: 4px;
    margin: 10px 0;
}

/* Loader styles */
.loader {
    border: 16px solid #f3f3f3;
    border-top: 16px solid #3498db;
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}


==== ./public/assets/js/admin.js ====
jQuery(document).ready(function($) {
    // Add real-time validation for payment domain
    $('input[name="payment_domain"]').on('blur', function() {
        validatePaymentDomain($(this).val());
    });

    // Add real-time validation for WeChat API key
    $('input[name="wechat_api_key"]').on('blur', function() {
        validateWechatApiKey($(this).val());
    });

    // Add real-time validation for AliPay public key
    $('textarea[name="alipay_public_key"]').on('blur', function() {
        validateAlipayPublicKey($(this).val());
    });

    // Validate payment domain
    function validatePaymentDomain(domain) {
        const pattern = /^https:\/\/([a-zA-Z0-9-]+\.){1,}[a-zA-Z]{2,}$/;
        if (!pattern.test(domain)) {
            showErrorMessage('域名必须为HTTPS格式，并且包含有效的顶级域名，如 https://pay.example.com');
            return false;
        }
        showSuccessMessage('域名格式正确');
        return true;
    }

    // Validate WeChat API key
    function validateWechatApiKey(apiKey) {
        const pattern = /^[a-zA-Z0-9]{32,64}$/;
        if (!pattern.test(apiKey)) {
            showErrorMessage('WeChat API Key必须是32至64位的字母和数字组合');
            return false;
        }
        showSuccessMessage('WeChat API Key格式正确');
        return true;
    }

    // Validate AliPay public key
    function validateAlipayPublicKey(publicKey) {
        const pemPattern = /^-----BEGIN PUBLIC KEY-----\n[A-Za-z0-9+/=\n]*\n-----END PUBLIC KEY-----$/;
        const publicKeyData = publicKey.replace(/\s/g, '');
        const pemDataPattern = /^[A-Za-z0-9+/=]+$/;

        if (!pemPattern.test(publicKey)) {
            showErrorMessage('AliPay公钥必须以-----BEGIN PUBLIC KEY-----开头，以-----END PUBLIC KEY-----结尾');
            return false;
        }

        if (!pemDataPattern.test(publicKeyData)) {
            showErrorMessage('AliPay公钥主体部分只能包含字母、数字、加号和等号');
            return false;
        }

        showSuccessMessage('AliPay公钥格式正确');
        return true;
    }

    // Show success message
    function showSuccessMessage(message) {
        $('.error-message').hide();
        $('.success-message').text(message).show();
    }

    // Show error message
    function showErrorMessage(message) {
        $('.success-message').hide();
        $('.error-message').text(message).show();
    }
});


==== ./woo-multi-site-payment.php ====
<?php
/**
 * Plugin Name: Woo Multi-Site Payment Gateway
 * Plugin URI: https://example.com/plugins
 * Description: A WooCommerce payment gateway for multi-site WordPress networks.
 * Version: 1.1
 * Author: Your Name
 * Author URI: https://example.com
 * License: GPL-2.0+
 * Text Domain: woo-multi-site-payment
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Plugin constants
define('WOO_MULTI_SITE_PAYMENT_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('WOO_MULTI_SITE_PAYMENT_PLUGIN_URL', plugin_dir_url(__FILE__));

// Load plugin files
require_once WOO_MULTI_SITE_PAYMENT_PLUGIN_DIR . 'includes/functions/utils-functions.php';
require_once WOO_MULTI_SITE_PAYMENT_PLUGIN_DIR . 'includes/functions/config-functions.php';
require_once WOO_MULTI_SITE_PAYMENT_PLUGIN_DIR . 'includes/classes/class-payment-gateway.php';

// Load language files
load_plugin_textdomain('woo-multi-site-payment', false, dirname(plugin_basename(__FILE__)) . '/languages/');

// Plugin initialization class
class WooMultiSitePaymentPlugin {
    public function __construct() {
        // Register payment gateways
        add_filter('woocommerce_payment_gateways', array($this, 'add_payment_gateways'));

        // Add admin menu for network settings
        add_action('network_admin_menu', array($this, 'add_network_admin_menu'));

        // Network settings initialization
        add_action('network_admin_init', array($this, 'network_settings_init'));
    }

    /**
     * Add payment gateways to WooCommerce
     *
     * @param array $gateways Existing payment gateways.
     * @return array Modified payment gateways.
     */
    public function add_payment_gateways($gateways) {
        if (function_exists('WC')) {
            require_once WOO_MULTI_SITE_PAYMENT_PLUGIN_DIR . 'includes/classes/class-wechat-pay.php';
            require_once WOO_MULTI_SITE_PAYMENT_PLUGIN_DIR . 'includes/classes/class-alipay.php';

            $gateways[] = 'WechatPay_Gateway';
            $gateways[] = 'Alipay_Gateway';
        }
        return $gateways;
    }

    /**
     * Add network admin menu
     */
    public function add_network_admin_menu() {
        if (is_multisite() && current_user_can('manage_network')) {
            add_menu_page(
                esc_html__('Multi-Site Payment Settings', 'woo-multi-site-payment'),
                esc_html__('Multi-Site Payment', 'woo-multi-site-payment'),
                'manage_network',
                'woo-multi-site-payment-network-settings',
                array($this, 'network_settings_page'),
                'dashicons-admin-generic',
                26
            );
        }
    }

    /**
     * Network settings page callback
     */
    public function network_settings_page() {
        echo '<div class="wrap">';
        echo '<h1>' . esc_html__('Multi-Site Payment Gateway Configuration', 'woo-multi-site-payment') . '</h1>';
        echo '<form method="post" action="options.php">';
        settings_fields('woo_multi_site_payment_network_settings');
        do_settings_sections('woo_multi_site_payment_network_settings');
        submit_button();
        echo '</form>';
        echo '</div>';
    }

    /**
     * Register and initialize network settings
     */
    public function network_settings_init() {
        register_setting('woo_multi_site_payment_network_settings', 'woo_multi_site_payment_network_config');
        add_settings_section(
            'woo_multi_site_payment_section',
            esc_html__('Global Payment Configuration', 'woo-multi-site-payment'),
            null,
            'woo_multi_site_payment_network_settings'
        );
        // Add settings here
    }
}

// Initialize the plugin
new WooMultiSitePaymentPlugin();

// Cleanup after uninstall
function woo_multi_site_payment_uninstall() {
    // Delete options and data
    delete_site_option('woo_multi_site_payment_network_config');
}
register_uninstall_hook(__FILE__, 'woo_multi_site_payment_uninstall');


